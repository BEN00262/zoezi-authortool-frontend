[{"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\reportWebVitals.js":"1","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\App.js":"2","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\question.jsx":"3","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\paper.jsx":"4","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\TextEditors.jsx":"5","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\index.js":"6","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\SCard.jsx":"7","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\comprehension.jsx":"8","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\normalQues.jsx":"9","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\ContentPage.jsx":"10","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\SideBar.jsx":"11","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\SModal.jsx":"12","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\context\\reducer.js":"13","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\context\\paperContext.js":"14","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\FormComp.jsx":"15","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\pages\\login.jsx":"16","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\routes\\ProtectedRoute.js":"17","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\analytics.jsx":"18","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\index.js":"19","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\routes\\ProtectedRoute.js":"20","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\pages\\login.jsx":"21","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SideBar.jsx":"22","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SModal.jsx":"23","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\comprehension.jsx":"24","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\context\\paperContext.js":"25","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\context\\reducer.js":"26","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\topic.jsx":"27","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\paperhoc.jsx":"28","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\App.js":"29","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\FormComp.jsx":"30","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\question.jsx":"31","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\normalQues.jsx":"32","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\paper.jsx":"33","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\ContentPage.jsx":"34","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SCard.jsx":"35","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\Navbar.jsx":"36","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\context\\actionTypes.js":"37","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\FolderComp.jsx":"38","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\analytics.jsx":"39","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\Notifications.jsx":"40","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\StatusComp.jsx":"41","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SearchForm.jsx":"42","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\paperimport.jsx":"43","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\pages\\authorManagement.jsx":"44","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\admin-panel\\author.jsx":"45","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\admin-panel\\authorList.jsx":"46","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\admin-panel\\newAuthor.jsx":"47","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SocketWatcher.jsx":"48","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\FilterComp.jsx":"49"},{"size":362,"mtime":1609176012785,"results":"50","hashOfConfig":"51"},{"size":744,"mtime":1609299009078,"results":"52","hashOfConfig":"51"},{"size":1965,"mtime":1609965176341,"results":"53","hashOfConfig":"51"},{"size":4432,"mtime":1609966262069,"results":"54","hashOfConfig":"51"},{"size":701,"mtime":1609181893606,"results":"55","hashOfConfig":"51"},{"size":484,"mtime":1609931921040,"results":"56","hashOfConfig":"51"},{"size":301,"mtime":1609961961054,"results":"57","hashOfConfig":"51"},{"size":6541,"mtime":1609661285541,"results":"58","hashOfConfig":"51"},{"size":5358,"mtime":1609965905514,"results":"59","hashOfConfig":"51"},{"size":788,"mtime":1609967015571,"results":"60","hashOfConfig":"51"},{"size":2333,"mtime":1609303848599,"results":"61","hashOfConfig":"51"},{"size":1635,"mtime":1609663197916,"results":"62","hashOfConfig":"51"},{"size":2928,"mtime":1609317645542,"results":"63","hashOfConfig":"51"},{"size":6209,"mtime":1609661792928,"results":"64","hashOfConfig":"51"},{"size":1655,"mtime":1609306100282,"results":"65","hashOfConfig":"51"},{"size":259,"mtime":1609298596832,"results":"66","hashOfConfig":"51"},{"size":413,"mtime":1609300664691,"results":"67","hashOfConfig":"51"},{"size":1164,"mtime":1609966888991,"results":"68","hashOfConfig":"51"},{"size":511,"mtime":1613394005835,"results":"69","hashOfConfig":"70"},{"size":419,"mtime":1618889495548,"results":"71","hashOfConfig":"70"},{"size":259,"mtime":1613299167432,"results":"72","hashOfConfig":"70"},{"size":1546,"mtime":1620808499615,"results":"73","hashOfConfig":"70"},{"size":4344,"mtime":1623601025988,"results":"74","hashOfConfig":"70"},{"size":9093,"mtime":1621188443591,"results":"75","hashOfConfig":"70"},{"size":9369,"mtime":1628692643336,"results":"76","hashOfConfig":"70"},{"size":3401,"mtime":1623602391162,"results":"77","hashOfConfig":"70"},{"size":658,"mtime":1613303544222,"results":"78","hashOfConfig":"70"},{"size":3196,"mtime":1623602257985,"results":"79","hashOfConfig":"70"},{"size":1399,"mtime":1628692699654,"results":"80","hashOfConfig":"70"},{"size":1772,"mtime":1620992092253,"results":"81","hashOfConfig":"70"},{"size":3559,"mtime":1620913252933,"results":"82","hashOfConfig":"70"},{"size":6669,"mtime":1621188446978,"results":"83","hashOfConfig":"70"},{"size":11956,"mtime":1623595036787,"results":"84","hashOfConfig":"70"},{"size":1126,"mtime":1621524722181,"results":"85","hashOfConfig":"70"},{"size":301,"mtime":1613299167417,"results":"86","hashOfConfig":"70"},{"size":1282,"mtime":1628692678263,"results":"87","hashOfConfig":"70"},{"size":607,"mtime":1623602316607,"results":"88","hashOfConfig":"70"},{"size":2317,"mtime":1622706563969,"results":"89","hashOfConfig":"70"},{"size":1486,"mtime":1616314756024,"results":"90","hashOfConfig":"70"},{"size":3172,"mtime":1616314578486,"results":"91","hashOfConfig":"70"},{"size":1334,"mtime":1620586182762,"results":"92","hashOfConfig":"70"},{"size":2030,"mtime":1623602725208,"results":"93","hashOfConfig":"70"},{"size":4352,"mtime":1620912909525,"results":"94","hashOfConfig":"70"},{"size":2709,"mtime":1628695707926,"results":"95","hashOfConfig":"70"},{"size":890,"mtime":1621012748783,"results":"96","hashOfConfig":"70"},{"size":587,"mtime":1621012175882,"results":"97","hashOfConfig":"70"},{"size":3340,"mtime":1621015857511,"results":"98","hashOfConfig":"70"},{"size":605,"mtime":1622711077094,"results":"99","hashOfConfig":"70"},{"size":805,"mtime":1623602808898,"results":"100","hashOfConfig":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"1fbvc2n",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"198lg4a",{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"145"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"145"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"145"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"182"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"145"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"182"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"145"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"182"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"145"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\reportWebVitals.js",[],["225","226"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\App.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\question.jsx",["227","228","229","230","231"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\paper.jsx",["232","233"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\TextEditors.jsx",["234"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\index.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\SCard.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\comprehension.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\normalQues.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\ContentPage.jsx",["235"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\SideBar.jsx",["236"],"import React,{useState,useEffect,useContext} from 'react';\r\nimport {Card,List,Header} from \"semantic-ui-react\";\r\n\r\nimport {PaperContext} from \"../context/paperContext\";\r\nimport SModal from './SModal';\r\n\r\n// this will be initialized from the server\r\nconst SideBar = () => {\r\n    const {changePaperID,createPaperDispatch,papers,authToken,fetchPapers} = useContext(PaperContext);\r\n\r\n    useEffect(() => {\r\n        fetchPapers(authToken);\r\n    },[]);\r\n\r\n    const [paper,setPaper] = useState({\r\n        grade:\"\",\r\n        subject:\"\",\r\n        paperType:\"\"\r\n    })\r\n\r\n    const handleInputChange = (e) => {\r\n        setPaper({...paper,[e.target.name]:e.target.value});\r\n    }\r\n\r\n    const createPaper = () => {\r\n        createPaperDispatch({...paper},authToken);\r\n    }\r\n\r\n    const handlePaperSelect = (paper_id) => {\r\n        changePaperID(paper_id,authToken);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SModal handleInputChange={handleInputChange} createPaper={createPaper}/>\r\n            {Object.keys(papers).map((paperType,p_index) => {\r\n                return (\r\n                    <React.Fragment key={`pt_${p_index}`}>\r\n                        <Header as=\"h5\">{paperType}</Header>\r\n                        <Card>\r\n                            <Card.Content>\r\n                                <List divided verticalAlign='middle'>\r\n                                        {papers[paperType].papers.map((pp,index) => {\r\n                                            return (\r\n                                                <List.Item key={`pp_${index}`} onClick={() => handlePaperSelect(`${pp.id}`)}>\r\n                                                    <List.Icon name='file alternate' />\r\n                                                    <List.Content>\r\n                                                        <List.Header as='a'>{pp.name}</List.Header>\r\n                                                    </List.Content>\r\n                                                </List.Item>\r\n                                            );\r\n                                        })}\r\n                                </List>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    </React.Fragment>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SideBar;",["237","238"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\SModal.jsx",["239","240"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\context\\reducer.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\context\\paperContext.js",[],["241","242"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\FormComp.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\pages\\login.jsx",[],["243","244"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\routes\\ProtectedRoute.js",[],["245","246"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\tool\\src\\components\\analytics.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\index.js",[],["247","248"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\routes\\ProtectedRoute.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\pages\\login.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SideBar.jsx",["249","250"],"import React,{useEffect,useContext} from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nimport {PaperContext} from \"../context/paperContext\";\r\nimport SModal from './SModal';\r\nimport FolderComp from './FolderComp';\r\nimport PaperImport from './paperimport';\r\n\r\nconst SideBar = () => {\r\n    const {changePaperID,createPaperDispatch,papers,authToken,fetchPapers} = useContext(PaperContext);\r\n    \r\n    useEffect(() => {\r\n        fetchPapers(authToken);\r\n    },[]);\r\n\r\n    const createPaper = (paper) => {\r\n        createPaperDispatch(paper,authToken);\r\n    }\r\n\r\n    const handlePaperSelect = (paper_id) => {\r\n        changePaperID(paper_id);\r\n    }\r\n\r\n    // create a folder view for these files and groupings\r\n    // check for the active paper then highlight it for visibility's sake\r\n    return (\r\n        <>\r\n            <SModal createPaper={createPaper}/>\r\n            <PaperImport/>\r\n            <div  style={{height:\"85vh\", overflowY:\"scroll\", marginTop:\"10px\", padding:\"10px\"}}>\r\n                {Object.keys(papers).map((paperType,p_index) => {\r\n                    return (\r\n                        <React.Fragment key={`pt_${p_index}`}>\r\n                            <FolderComp handlePaperSelect={handlePaperSelect}\r\n                                paperType={paperType}\r\n                                papers = {papers[paperType].papers}\r\n                            />\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SideBar;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SModal.jsx",["251"],"import React,{useState,useEffect,useContext} from \"react\";\r\nimport { Button, Form, Modal,Dropdown } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\nconst SModal = ({createPaper}) => {\r\n    const { authToken,createNotification } = useContext(PaperContext);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [gradeSelection,setGradeSelection] = useState([]);\r\n    const [subjectSelection,setSubjectSelection] = useState({});\r\n    const [paperTypeSelection,setPaperTypeSelection] = useState([]);\r\n    const [displaySubjects,setDisplaySubjects] = useState([]);\r\n    \r\n    const [paper,setPaper] = useState({\r\n        grade:\"\",\r\n        subject:\"\",\r\n        paperType:\"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n      axios.get(\"/user/metadata\",{\r\n        headers:{\r\n            AuthToken:authToken\r\n        }\r\n      })\r\n        .then(({ data }) => {\r\n          let paperTypesFetched = data.paperTypeCanDo.map((x,index) => {\r\n            return { key: `${x.replaceAll(\" \",\"\")}_${index}`, text: x, value: x }\r\n          })\r\n\r\n          setPaperTypeSelection(paperTypesFetched);\r\n\r\n          let gradesFetched = data.contentCanDo.map((x,index) => ({ key: `${x.grade}_${index}`, text: x.grade, value: x.grade}));\r\n          setGradeSelection(gradesFetched);\r\n\r\n          let subjectsMapping = data.contentCanDo.reduce((acc,current) => {\r\n            acc[current.grade] = current.subjects.map((x,index) => ({key: `${x.replaceAll(\" \",\"\")}_${index}`, text: x, value: x}));\r\n            return acc;\r\n          },{});\r\n\r\n          setSubjectSelection(subjectsMapping);\r\n        })\r\n        .catch(error => {\r\n          setOpen(false);\r\n          createNotification(\"Error!\",\"danger\",error.message);\r\n        })\r\n\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        createPaper(paper);\r\n        setOpen(false);\r\n    }\r\n    \r\n    const handleGradeSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          grade:value\r\n        });\r\n        setDisplaySubjects(subjectSelection[value]);\r\n    }\r\n\r\n    const handleSubjectSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          subject:value\r\n        });\r\n    }\r\n\r\n    const handlePaperTypeSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          paperType:value\r\n        });\r\n    }\r\n\r\n    const handleOnClose = (e) => {\r\n      e.preventDefault();\r\n      setOpen(false);\r\n    }\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      size=\"tiny\"\r\n      open={open}\r\n      trigger={<Button basic compact fluid primary content='create paper' icon='pencil alternate' labelPosition='right'/>}\r\n    >\r\n      <Modal.Header>New Paper</Modal.Header>\r\n        <Modal.Content>\r\n        <Form>\r\n            <Form.Field>\r\n                <label>Grade</label>\r\n                <Dropdown\r\n                        onChange={handleGradeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={gradeSelection}\r\n                        placeholder='Select Grade'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Subject</label>\r\n                <Dropdown\r\n                        onChange={handleSubjectSelection}\r\n                        selection\r\n                        fluid\r\n                        options={displaySubjects}\r\n                        placeholder='Select Subject'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Paper Type</label>\r\n                <Dropdown\r\n                        onChange={handlePaperTypeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={paperTypeSelection}\r\n                        placeholder='Select Paper Type'\r\n                    />\r\n            </Form.Field> \r\n        </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button.Group>\r\n            <Button color='black' onClick={handleOnClose}>Cancel</Button>\r\n            <Button.Or />\r\n            <Button onClick={handleSubmit} positive>Create Paper</Button>\r\n          </Button.Group>\r\n        </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SModal;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\comprehension.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\context\\paperContext.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\context\\reducer.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\topic.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\paperhoc.jsx",["252","253"],"import React,{useContext,useEffect} from 'react';\r\nimport {Segment,Loader} from \"semantic-ui-react\";\r\n\r\nimport Paper from \"./paper\";\r\nimport {PaperContext} from \"../context/paperContext\";\r\nimport { useState } from 'react';\r\n\r\nimport SearchForm from \"./SearchForm\";\r\n\r\n\r\nconst PaperHOC = () => {\r\n    const { \r\n        paperID,fetchQuestions,\r\n        authToken,isSubmittedDispatch,\r\n        updatePaperDetails,searchForQuestions\r\n        ,isRefreshing\r\n    } = useContext(PaperContext);\r\n    \r\n    const [fetchedQuestions,setFetchedQuestions] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(null);\r\n    const [pageCount,setPageCount] = useState(0);\r\n    const [currentActivePage, setCurrectActivePage] = useState(1);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n    const [error,setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setCurrectActivePage(1);\r\n    },[paperID]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm !== null){\r\n            searchForQuestions(authToken,paperID,searchTerm)\r\n            .then(({ data }) => {\r\n                if (data && data.success){\r\n                    setPageCount(1);\r\n                    console.log(data);\r\n                    setFetchedQuestions(data.paper.questions);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n        }\r\n    },[searchTerm])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetchQuestions(paperID,authToken, currentActivePage - 1)\r\n            .then(({data}) => {\r\n                setPageCount(data.pageCount);\r\n                // console.log(data.paper);\r\n                setFetchedQuestions(data.paper.questions);\r\n                isSubmittedDispatch(data.paper.isSubmitted);\r\n\r\n                updatePaperDetails({\r\n                    grade: data.paper.grade,\r\n                    subject: data.paper.subject,\r\n                    paperName: data.paper.paperName,\r\n                    paperType: data.paper.paperType\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n            .finally(() => { setIsLoading(false); })\r\n    },[paperID, currentActivePage, isRefreshing]);\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div>\r\n                <Segment>\r\n                    <Loader active inline=\"centered\">Fetching questions...</Loader>\r\n                </Segment>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error){\r\n        return (\r\n            <Segment>\r\n                Error fetching questions\r\n            </Segment>\r\n        );\r\n    }\r\n\r\n    console.log(\r\n        fetchedQuestions[0]\r\n    )\r\n    \r\n    return (\r\n        <>\r\n            <SearchForm  setSearchTerm={setSearchTerm}/>\r\n            \r\n            {/* we want to rerender the paper when the search term is applied here what do we do? */}\r\n            <Paper\r\n                fetched_questions={fetchedQuestions}\r\n                pageCount={pageCount}\r\n                setCurrectActivePage={setCurrectActivePage}\r\n                currentActivePage={currentActivePage} \r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PaperHOC;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\App.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\FormComp.jsx",[],["254","255"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\question.jsx",[],["256","257"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\normalQues.jsx",["258"],"import React,{useState,useEffect,useCallback, useContext} from \"react\";\r\nimport SunEditor from 'suneditor-react';\r\nimport {Button,Icon,Form,Checkbox} from \"semantic-ui-react\";\r\n\r\nimport Topic from './topic';\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\nconst QUESTION_TYPE = \"normal\";\r\nconst EDITOR_OPTIONS = [\r\n    ['undo', 'redo', 'font', 'fontSize', 'formatBlock'],\r\n    ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'removeFormat'],\r\n    ['fontColor', 'hiliteColor', 'outdent', 'indent', 'align', 'horizontalRule', 'list', 'table'],\r\n    ['image', 'fullScreen', 'showBlocks', 'preview']\r\n];\r\n\r\nconst CAN_REVIEW = \"can:review\";\r\n\r\n// use the index to change the question's content on save or updating\r\nconst NormalQuestionComp = ({saveQuestionToDatabase,retrievedQuestion = {},index,isSubmitted = false}) => {\r\n    const { roles } = useContext(PaperContext);\r\n    const check_role = useCallback((role_required) => roles.includes(role_required),[roles]);\r\n    const isReviewer = check_role(CAN_REVIEW);\r\n\r\n    const [question,setQuestion] = useState(\"\");\r\n    const [topic,setTopic] = useState({ topic:\" \", subTopic:\" \" });\r\n    const [options,setOptions] = useState([]);\r\n    const [additionalInfo,setAdditionalInfo] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let initialQuestion = retrievedQuestion && retrievedQuestion.question ? retrievedQuestion.question : \"\";    \r\n        let initialOptions = retrievedQuestion && retrievedQuestion.options_next ?retrievedQuestion.options_next.map(({option,isCorrect}) => {\r\n            return {option,isCorrect};\r\n        })  : [];\r\n        let initialAdditional = retrievedQuestion && retrievedQuestion.additionalInfo ? retrievedQuestion.additionalInfo : \"\";\r\n        \r\n        let initialTopicAndSubtopic = retrievedQuestion && retrievedQuestion.topic ? {\r\n            topic: retrievedQuestion.topic,\r\n            subTopic: retrievedQuestion.subTopic\r\n        } : { topic:\" \", subTopic:\" \" };\r\n\r\n        setTopic(initialTopicAndSubtopic);\r\n        setQuestion(initialQuestion);\r\n        setOptions(initialOptions);\r\n        setAdditionalInfo(initialAdditional);\r\n    },[]);\r\n\r\n    const handleSetTopic = (e) => {\r\n        setTopic({\r\n            ...topic,\r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n\r\n    const handleAddOptions = (e) => {\r\n        e.preventDefault();\r\n        setOptions([...options,{option:\"\",isCorrect:false}]);\r\n    }\r\n\r\n    const handleOptionsInput = (e,index) => {\r\n        let localOptions = [...options];\r\n        localOptions[index].option = e.target.value;\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const onOptionSet = (index) => {\r\n        let localOptions = [...options];\r\n        localOptions[index].isCorrect = !localOptions[index].isCorrect;\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const removeOption = (event,index) => {\r\n        event.preventDefault();\r\n        let localOptions = [...options];\r\n        localOptions.splice(index,1);\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const handleAddAdditionalInfo = (e) => {\r\n        e.preventDefault();\r\n        setAdditionalInfo(\" \");\r\n    }\r\n\r\n    const handleAdditionalTextE = (text) => {\r\n        setAdditionalInfo(text);\r\n    }\r\n\r\n    const saveQuestion = (e) => {\r\n        e.preventDefault();\r\n\r\n        let createdQuestion = {\r\n            questionType: QUESTION_TYPE,\r\n            question_id: retrievedQuestion ? retrievedQuestion._id : null,\r\n            question,\r\n            options_next:options,\r\n            topic: topic.topic,\r\n            subTopic: topic.subTopic,\r\n            additionalInfo:additionalInfo ? additionalInfo : \"\"\r\n        }\r\n\r\n        saveQuestionToDatabase(createdQuestion,index);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={saveQuestion}>\r\n            <Topic handleTopicAndSubject={handleSetTopic} topic={topic.topic} subtopic={topic.subTopic}/>\r\n            <Form.Field>\r\n                <SunEditor autoFocus={true}  setOptions={{\r\n                      buttonList : EDITOR_OPTIONS,\r\n                }} onChange={(content) => setQuestion(content) } setContents={question} showToolbar={true} enableToolbar={true}/>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Button type=\"button\" compact primary disabled={isSubmitted && !isReviewer} onClick={handleAddOptions} icon=\"add\" content=\"Option\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n            \r\n                {options.map((foundOption,index) => {\r\n                    return (\r\n                        <Form.Field key={`option_${index}`}>\r\n                            <Form.Group widths=\"1\" inline>\r\n                                <Form.Field>\r\n                                    <Checkbox disabled={isSubmitted && !isReviewer} defaultChecked={retrievedQuestion && foundOption.isCorrect ? true : false} onClick={(e) => onOptionSet(index)}/>\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <input value={retrievedQuestion ? foundOption.option : null} onChange={(e) => handleOptionsInput(e,index)} type=\"text\"/>\r\n                                </Form.Field>\r\n\r\n                                <Button type=\"button\" circular icon=\"superscript\" disabled={isSubmitted && !isReviewer} compact basic color=\"teal\"/>\r\n\r\n                                <Button type=\"button\" circular compact basic color=\"red\" disabled={isSubmitted && !isReviewer} icon onClick={(e) => removeOption(e,index)}>\r\n                                    <Icon name=\"trash alternate outline\"/>\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Form.Field>\r\n                    );\r\n                })}\r\n            \r\n            <Form.Field>\r\n                <Button type=\"button\" compact primary disabled={(additionalInfo?true:false) || isSubmitted } onClick={handleAddAdditionalInfo} content=\"Additional Information\" icon=\"add\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n            <Form.Field>\r\n               {additionalInfo ? \r\n                    <SunEditor autoFocus={true}  setOptions={{\r\n                        buttonList : EDITOR_OPTIONS,\r\n                  }} onChange={(content) => handleAdditionalTextE(content) } setContents={additionalInfo} showToolbar={true} enableToolbar={true}/>\r\n                    :null\r\n                } \r\n            </Form.Field>\r\n            <Button basic color=\"green\" content='Save Question' disabled={isSubmitted && !isReviewer} icon='save' labelPosition='right'/>\r\n        </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NormalQuestionComp;",["259","260"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\paper.jsx",["261","262"],"import React,{useState,useContext,useEffect} from \"react\";\r\nimport {Button,Header,Transition,Segment,Label,Pagination } from \"semantic-ui-react\";\r\nimport {motion} from 'framer-motion';\r\n\r\nimport QuestionComp from \"./question\";\r\nimport { PaperContext } from \"../context/paperContext\";\r\nimport StatusComp from \"./StatusComp\";\r\n\r\n\r\nconst CAN_REVIEW = \"can:review\";\r\n\r\n\r\nconst Paper = ({fetched_questions=[], pageCount,setCurrectActivePage, currentActivePage}) => {\r\n    const {authToken\r\n        ,createNotification\r\n        ,paperID\r\n        ,setIsSample\r\n        ,changePaperID\r\n        ,removePaper\r\n        ,paperName\r\n        ,fetchPapers\r\n        ,isSubmitted\r\n        ,submitPaperDispatch\r\n        ,approveQuestionDispatch\r\n        ,removeQuestionDispatch\r\n        ,socket_io_id,\r\n        paperType\r\n        ,roles} = useContext(PaperContext);\r\n\r\n    const check_role = (role_required) => roles.includes(role_required);\r\n    const isReviewer = check_role(CAN_REVIEW);\r\n    \r\n    const [isHidden,setIsHidden] = useState(new Array(fetched_questions.length).fill(true));\r\n\r\n    const [paperQuestions,setPaperQuestions] = useState([]);\r\n    const [is_submitted,setIsSubmitted] = useState(false);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setPaperQuestions(fetched_questions);\r\n        setIsSubmitted(isSubmitted);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        setPaperQuestions(fetched_questions);\r\n    },[fetched_questions]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n    },[isSubmitted]);\r\n\r\n    // set a fetch stuff here on click of the pagination thingy\r\n    const handlePageSwitch = (e, {activePage}) => {\r\n        setCurrectActivePage(activePage);\r\n    }\r\n\r\n    const updatePaperContent = (new_question,index) => {\r\n        let local_paper_copy = [...paperQuestions];\r\n        local_paper_copy[index] = new_question;\r\n        setPaperQuestions(local_paper_copy);\r\n    }\r\n\r\n    const internalSetIsSample = (index,questionID,isSample) => {\r\n        setIsSample(authToken, questionID, isSample)\r\n            .then(status => {\r\n                if (status) {\r\n                    let local_paper_copy = [...paperQuestions];\r\n                    local_paper_copy[index].isSample = isSample;\r\n                    setPaperQuestions(local_paper_copy);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const addQuestion = (e) => {\r\n        setPaperQuestions([...paperQuestions,null]);\r\n    }\r\n\r\n    const removeMyPaper = () => {\r\n        let reply = window.confirm(\"are you sure?\")\r\n\r\n        if (!reply)\r\n            return;\r\n\r\n        removePaper(paperID,authToken)\r\n            .then(({data}) => {\r\n                if (data){\r\n                    if (data.success){\r\n                        createNotification(\"Success!!\",\"success\",\"Paper deleted successfully\");\r\n                        fetchPapers(authToken);\r\n                        changePaperID(null);\r\n                        return;\r\n                    }\r\n                    throw new Error(data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!!\",\"danger\",error.message);\r\n            })\r\n    }\r\n\r\n    const removeQuestion = (questionId,index) => {\r\n        let reply = window.confirm(\"are you sure?\")\r\n\r\n        if (!reply)\r\n            return;\r\n        let paperQuestionsCopy = [...paperQuestions];\r\n        let question_object = paperQuestionsCopy[index];\r\n\r\n        let cleanUpFunc = () => {\r\n            paperQuestionsCopy.splice(index,1);\r\n            setPaperQuestions(paperQuestionsCopy);\r\n            createNotification(\"Success!\",\"success\",\"Question removed successfully\");\r\n        }\r\n\r\n        if(question_object){\r\n            removeQuestionDispatch(questionId,authToken)\r\n                .then(() => {\r\n                    cleanUpFunc();\r\n                })\r\n                .catch(error => {\r\n                    createNotification(\"Error!\",\"error\",error.message);\r\n                })\r\n        }else{\r\n            cleanUpFunc();\r\n        }\r\n    }\r\n\r\n    const updateQuestionsState = (status,index) => {\r\n        let paperQuestionsCopy = [...paperQuestions];\r\n        let question_object = paperQuestionsCopy[index];\r\n        question_object.status = status;\r\n        setPaperQuestions([...paperQuestionsCopy]);\r\n    }\r\n\r\n    const submitForReviewAction = () => {\r\n        submitPaperDispatch(socket_io_id,paperID,authToken)\r\n            .then(({data}) => {\r\n                if(data.success){\r\n                    setIsActive(true);\r\n                    createNotification(\"Success!\",\"success\",data.message);\r\n                }else{\r\n                    throw new Error(\"Failed to submit paper for review\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                createNotification(\"Error!\",\"danger\",error.message);\r\n            })\r\n    }\r\n\r\n    const approveAuthorQuestion = (id,index) => {\r\n        approveQuestionDispatch(id,index,authToken)\r\n            .then(({data}) => {\r\n                if(data.success){\r\n                    updateQuestionsState(\"approved\",index)\r\n                }else{\r\n                    throw new Error(\"Failed to approve question\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\",\"danger\",error.message);\r\n            });\r\n    }\r\n\r\n    const toggleQuestionVisibility = (index) => {\r\n        let clone_state = [...isHidden];\r\n        clone_state[index] = clone_state[index] ? !clone_state[index] : true;\r\n        setIsHidden(clone_state)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StatusComp isActive={isActive} setIsActive={setIsActive} setIsSubmitted={setIsSubmitted}/>\r\n            <motion.div\r\n                initial={{ opacity:0 }}\r\n                animate={{ opacity:1, duration:0.4 }}\r\n            >      \r\n                <div style={{marginBottom:\"10px\", borderBottom:\"1px solid #dbdbdb\", paddingBottom:\"1px\"}}>\r\n                    <Button compact basic color=\"teal\" disabled={is_submitted} onClick={addQuestion} content='create question' icon='add' labelPosition='right'/>\r\n                    \r\n                    <Button\r\n                        compact\r\n                        basic\r\n                        color=\"orange\" \r\n                        disabled={check_role(CAN_REVIEW) || is_submitted}\r\n                        onClick={submitForReviewAction} \r\n                        content='submit paper' \r\n                        icon='send' \r\n                        labelPosition='right'/>\r\n\r\n                    <Button\r\n                        compact\r\n                        basic\r\n                        color=\"red\"\r\n                        disabled={is_submitted && !isReviewer}\r\n                        onClick={removeMyPaper} \r\n                        content='delete paper' \r\n                        icon='trash alternate outline' \r\n                        labelPosition='right'/>\r\n\r\n                    {isReviewer ? <Button\r\n                        compact\r\n                        basic\r\n                        color=\"green\"\r\n                        \r\n                        disabled={true}//{is_submitted && !isReviewer}\r\n                        // onClick={removeMyPaper} \r\n                        content='approve paper' \r\n                        icon='thumbs up outline'\r\n                        labelPosition='right'/>\r\n                        : null }\r\n\r\n                    <div style={{\r\n                        margin:\"5px\"\r\n                    }}>\r\n                        <Label content={paperType}/>\r\n                        <Label content={paperName}/>  \r\n                    </div> \r\n                </div>\r\n                \r\n\r\n                \r\n                <div style={{height:\"85vh\", overflowY:\"scroll\",paddingRight:\"6px\", paddingLeft:\"4px\"}} >\r\n                    {paperQuestions.map((retrievedQuestion,index) => {\r\n                        return (\r\n                            <React.Fragment key={`question_${index}`}>\r\n                                \r\n                                    <Segment.Group horizontal compact>\r\n                                        <Segment onClick={(x) => toggleQuestionVisibility(index)} style={{cursor:\"pointer\"}} color='orange'>\r\n                                            <Header as='h3'>Question  {index + 1}</Header>\r\n                                        </Segment>\r\n                                        <Segment basic textAlign={\"center\"} color=\"green\">\r\n                                            <Label color='green'>\r\n                                                {retrievedQuestion && retrievedQuestion.status ? retrievedQuestion.status.toUpperCase() : \"ONGOING\"}\r\n                                            </Label>\r\n                                        </Segment>\r\n                                        <Segment basic textAlign={\"right\"} color='red'>\r\n                                            {/* check if the paper is saved first */}\r\n                                        {retrievedQuestion && (retrievedQuestion._id !== null) && check_role(CAN_REVIEW)? \r\n                                            <Button basic compact color=\"olive\" \r\n                                                // disabled={retrievedQuestion && retrievedQuestion.isExposed} \r\n                                                icon \r\n                                                onClick={(e) => internalSetIsSample(index,retrievedQuestion && retrievedQuestion._id,(retrievedQuestion && !retrievedQuestion.isSample))}\r\n                                                // update status za hii stuff pia\r\n                                                // onClick={(e) => approveAuthorQuestion(retrievedQuestion && retrievedQuestion._id,index)} \r\n                                                content={retrievedQuestion && retrievedQuestion.isSample ? \"remove sample\": \"set sample\"}/> : null\r\n                                        }\r\n                                        {is_submitted && check_role(CAN_REVIEW)? \r\n                                            <Button basic compact color=\"orange\" \r\n                                                disabled={retrievedQuestion && retrievedQuestion.isExposed} \r\n                                                icon \r\n                                                onClick={(e) => approveAuthorQuestion(retrievedQuestion && retrievedQuestion._id,index)} \r\n                                                content=\"Approve\" icon=\"thumbs up alternate outline\" labelPosition=\"right\"/> : null\r\n                                        }\r\n                                            \r\n                                            <Button compact basic color=\"red\" disabled={isSubmitted && !isReviewer} onClick={(e) => removeQuestion(retrievedQuestion ? retrievedQuestion._id:null,index)} content=\"Delete\" icon=\"trash alternate outline\" labelPosition=\"right\"/>\r\n                                        \r\n                                        </Segment>\r\n                                    </Segment.Group>\r\n                                \r\n                                <Transition visible={isHidden[index] ? !isHidden[index] : true} animation='drop' duration={450}>\r\n                                    <div style={{marginBottom:\"20px\"}}>\r\n                                        <QuestionComp key={`question_${index}`} updatePaperContent={updatePaperContent} retrievedQuestion={retrievedQuestion} index={index}/>\r\n                                    </div>\r\n                                </Transition>\r\n\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                    { pageCount > 1 ? <Pagination onPageChange={handlePageSwitch} defaultActivePage={currentActivePage} totalPages={pageCount} /> : null}\r\n                </div>\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Paper;",["263","264"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\ContentPage.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SCard.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\Navbar.jsx",["265"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\context\\actionTypes.js",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\FolderComp.jsx",["266","267"],"import React, { useState, useContext, useEffect, useMemo } from 'react';\r\nimport { Icon, List, Header } from 'semantic-ui-react';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\n\r\n// this takes in the name of the folder and the contained files\r\nconst FolderComp = ({paperType,papers,handlePaperSelect}) => {\r\n    const [isOpen,setIsOpen] = useState(false);\r\n\r\n    const {\r\n        paperID\r\n    } = useContext(PaperContext);\r\n\r\n    \r\n\r\n    const _handlePaperSelectContextMenu = (e,paperID) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <Header as=\"h5\" onClick={() => setIsOpen(!isOpen)} style={{cursor:'pointer'}}>\r\n                <Icon disabled name={isOpen ? 'folder open' : 'folder'} />\r\n                {paperType}\r\n            </Header>\r\n\r\n            <div style={{marginLeft:\"10px\", marginBottom:\"10px\"}} hidden={!isOpen }>\r\n                        <List divided verticalAlign='middle'>\r\n                            {papers.map((pp,index) => {\r\n                                const isSelected = paperID === pp.id;\r\n                                return (\r\n                                    <List.Item key={`pp_${index}`} onContextMenu={(e) => _handlePaperSelectContextMenu(e,`${pp.id}`)}  onClick={() => handlePaperSelect(`${pp.id}`)}>\r\n                                        <List.Icon name={isSelected ?'file alternate' : 'file alternate outline'} />\r\n                                        <List.Content>\r\n                                            \r\n                                            <List.Header as='a'>\r\n                                                <div style={{\r\n                                                    textDecoration:isSelected ? \"underline\" : \"inherit\",\r\n                                                }}>\r\n                                                    {pp.name.charAt(0).toUpperCase() + pp.name.slice(1)}\r\n                                                </div>\r\n                                            </List.Header>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                );\r\n                            })}\r\n                        </List>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FolderComp;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\analytics.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\Notifications.jsx",["268","269","270","271","272","273","274","275","276","277","278","279","280","281"],"import React from 'react'\r\nimport { Feed, Icon } from 'semantic-ui-react'\r\nimport Navbar from './Navbar';\r\n\r\nconst Notifications = () => (\r\n    <>\r\n    <Navbar/>\r\n  <Feed>\r\n    <Feed.Event>\r\n      <Feed.Label>\r\n        <img src='/images/avatar/small/elliot.jpg' />\r\n      </Feed.Label>\r\n      <Feed.Content>\r\n        <Feed.Summary>\r\n          <Feed.User>Elliot Fu</Feed.User> added you as a friend\r\n          <Feed.Date>1 Hour Ago</Feed.Date>\r\n        </Feed.Summary>\r\n        <Feed.Meta>\r\n          <Feed.Like>\r\n            <Icon name='like' />4 Likes\r\n          </Feed.Like>\r\n        </Feed.Meta>\r\n      </Feed.Content>\r\n    </Feed.Event>\r\n\r\n    <Feed.Event>\r\n      <Feed.Label image='/images/avatar/small/helen.jpg' />\r\n      <Feed.Content>\r\n        <Feed.Summary>\r\n          <a>Helen Troy</a> added <a>2 new illustrations</a>\r\n          <Feed.Date>4 days ago</Feed.Date>\r\n        </Feed.Summary>\r\n        <Feed.Extra images>\r\n          <a>\r\n            <img src='/images/wireframe/image.png' />\r\n          </a>\r\n          <a>\r\n            <img src='/images/wireframe/image.png' />\r\n          </a>\r\n        </Feed.Extra>\r\n        <Feed.Meta>\r\n          <Feed.Like>\r\n            <Icon name='like' />1 Like\r\n          </Feed.Like>\r\n        </Feed.Meta>\r\n      </Feed.Content>\r\n    </Feed.Event>\r\n\r\n    <Feed.Event>\r\n      <Feed.Label image='/images/avatar/small/jenny.jpg' />\r\n      <Feed.Content>\r\n        <Feed.Summary\r\n          date='2 Days Ago'\r\n          user='Jenny Hess'\r\n          content='add you as a friend'\r\n        />\r\n        <Feed.Meta>\r\n          <Feed.Like>\r\n            <Icon name='like' />8 Likes\r\n          </Feed.Like>\r\n        </Feed.Meta>\r\n      </Feed.Content>\r\n    </Feed.Event>\r\n\r\n    <Feed.Event>\r\n      <Feed.Label image='/images/avatar/small/joe.jpg' />\r\n      <Feed.Content>\r\n        <Feed.Summary>\r\n          <a>Joe Henderson</a> posted on his page\r\n          <Feed.Date>3 days ago</Feed.Date>\r\n        </Feed.Summary>\r\n        <Feed.Extra text>\r\n          Ours is a life of constant reruns. We're always circling back to where\r\n          we'd we started, then starting all over again. Even if we don't run\r\n          extra laps that day, we surely will come back for more of the same\r\n          another day soon.\r\n        </Feed.Extra>\r\n        <Feed.Meta>\r\n          <Feed.Like>\r\n            <Icon name='like' />5 Likes\r\n          </Feed.Like>\r\n        </Feed.Meta>\r\n      </Feed.Content>\r\n    </Feed.Event>\r\n\r\n    <Feed.Event>\r\n      <Feed.Label image='/images/avatar/small/justen.jpg' />\r\n      <Feed.Content>\r\n        <Feed.Summary>\r\n          <a>Justen Kitsune</a> added <a>2 new photos</a> of you\r\n          <Feed.Date>4 days ago</Feed.Date>\r\n        </Feed.Summary>\r\n        <Feed.Extra images>\r\n          <a>\r\n            <img src='/images/wireframe/image.png' />\r\n          </a>\r\n          <a>\r\n            <img src='/images/wireframe/image.png' />\r\n          </a>\r\n        </Feed.Extra>\r\n        <Feed.Meta>\r\n          <Feed.Like>\r\n            <Icon name='like' />\r\n            41 Likes\r\n          </Feed.Like>\r\n        </Feed.Meta>\r\n      </Feed.Content>\r\n    </Feed.Event>\r\n  </Feed>\r\n  </>\r\n)\r\n\r\nexport default Notifications;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\StatusComp.jsx",["282"],"import React, { useState, useContext } from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\n\r\nconst StatusComp = ({ isActive, setIsActive, setIsSubmitted }) => {\r\n    const {authToken\r\n        ,isSubmittedDispatch\r\n        ,fetchPapers\r\n        ,socketIO\r\n    } = useContext(PaperContext);\r\n\r\n    // we are updating the context too much\r\n    const [processingMessages, setProcessingMessages] = useState(\"\");\r\n\r\n    const setStatusSteps = (msg) => {\r\n        console.log(msg);\r\n        setProcessingMessages(before => before + msg + '\\n');\r\n    }\r\n\r\n    socketIO.on('submission_status',(msg) => {\r\n        setStatusSteps(msg);\r\n    })\r\n\r\n    socketIO.on('submission_error',(msg) => {\r\n        setStatusSteps(msg);\r\n        setTimeout(() => {\r\n            setIsActive(false);\r\n        },3000);\r\n    })\r\n\r\n    socketIO.on('submission_end',(msg) => {\r\n        setStatusSteps(msg);\r\n        \r\n        setIsSubmitted(true);\r\n        isSubmittedDispatch(true);\r\n        fetchPapers(authToken);\r\n\r\n        setTimeout(() => {\r\n            setIsActive(false);\r\n        },3000);\r\n    })\r\n\r\n    return (\r\n        <Dimmer active={isActive}>\r\n            <Loader content={\"submitting paper ... please wait ...\"}/>\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default StatusComp;",["283","284"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SearchForm.jsx",["285"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, Divider } from \"semantic-ui-react\"\r\nimport queryString from 'query-string';\r\n\r\nimport FilterComp from './FilterComp'\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\n\r\n// start working on this now\r\nconst SearchForm = ({ setSearchTerm: setParentSearchTerm }) => {\r\n    const { setIsRefreshingDispatch, isRefreshing } = useContext(PaperContext)\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchCategory,setSearchCategory] = useState(\"\");\r\n\r\n    const changeSearchTerm = (e) => {\r\n        setSearchTerm(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searchCategory === \"none\"){\r\n            setIsRefreshingDispatch(!isRefreshing);\r\n        }\r\n    },[searchCategory])\r\n\r\n\r\n    const searchDB = (e) => {\r\n        e.preventDefault();\r\n        let searchString = {}\r\n\r\n        if (searchTerm) {\r\n            searchString.searchTerm = searchTerm\r\n        }\r\n\r\n        if (searchCategory){\r\n            searchString.searchCategory = searchCategory\r\n        }\r\n\r\n        setParentSearchTerm(queryString.stringify(searchString));\r\n        setSearchTerm(\"\");\r\n        setSearchCategory(\"\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={searchDB}>\r\n                    <Form.Group >\r\n                        <Form.Field width={11}>\r\n                            <input type=\"search\" placeholder=\"Search...\" onChange={changeSearchTerm} value={searchTerm}/>\r\n                        </Form.Field>\r\n                        <Form.Field width={2}>\r\n                            <FilterComp setChooseCategory={setSearchCategory}/>\r\n                        </Form.Field>\r\n                        <Form.Field width={2}>\r\n                            <Button content=\"SEARCH\" icon=\"search\" color=\"green\" basic labelPosition=\"right\"/>\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n            </Form>\r\n            <Divider/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\paperimport.jsx",["286"],"import React,{useState,useEffect,useContext} from \"react\";\r\nimport { Button, Form, Modal,Dropdown, Segment, Label } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\nconst PaperImport = () => {\r\n    const { authToken, createNotification, fetchPapers } = useContext(PaperContext);\r\n    const [open, setIsOpen] = useState(false);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n\r\n    const [gradeSelection,setGradeSelection] = useState([]);\r\n    const [errors, setErrors] = useState(null);\r\n    const [displayError,setDisplayError] = useState(false);\r\n    \r\n    const [paper,setPaper] = useState({\r\n        grade:\"\",\r\n        paperType:\"\",\r\n        excelFile: null\r\n    });\r\n\r\n    const setOpen = (value) => {\r\n        setIsOpen(value);\r\n\r\n        if (!value){\r\n            setDisplayError(false);\r\n            setErrors(null);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n      axios.get(\"/user/metadata\",{\r\n        headers:{\r\n            AuthToken:authToken\r\n        }\r\n      })\r\n        .then(({ data }) => {\r\n          setGradeSelection(\r\n            data.contentCanDo.map((x,index) => ({ key: `${x.grade}_${index}`, text: x.grade, value: x.grade}))\r\n          );\r\n        })\r\n        .catch(error => {\r\n            setErrors(error.message);\r\n            setDisplayError(true);\r\n        })\r\n\r\n    },[]);\r\n\r\n    const handleSubmit = () => {\r\n        setDisplayError(false);\r\n        setErrors(null);\r\n        setIsLoading(true);\r\n\r\n        const formData = new FormData();\r\n        \r\n        Object.entries(paper).filter(([x,_]) => x !== 'excelFile').forEach(([key,value]) => {\r\n            formData.append(key,value);\r\n        })\r\n        formData.append(\"excelFile\",paper.excelFile,paper.excelFile.name)\r\n\r\n        // submit the data the paper here\r\n        axios.post('/import-excel-paper',formData,{\r\n            headers:{ AuthToken:authToken }\r\n        })\r\n            .then(({ data }) => {\r\n                if (data){\r\n                    if (data.success){\r\n                        setOpen(false);\r\n                        createNotification(\"Success!\",\"success\",\"Imported data successfully\");\r\n                        fetchPapers(authToken);\r\n                        return;\r\n                    }\r\n                    throw new Error(data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setErrors(error.message);\r\n                setDisplayError(true);\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            })\r\n    }\r\n    \r\n    const handleGradeSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          grade:value\r\n        });\r\n    }\r\n\r\n    const handleExcelFileSelection = (e) => {\r\n        setPaper({\r\n            ...paper,\r\n            excelFile: e.target.files[0]\r\n        })\r\n    }\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      size=\"tiny\"\r\n      open={open}\r\n      trigger={\r\n        <Button content=\"import excel\" style={{\r\n            marginTop:\"5px\"\r\n        }} icon=\"download\" fluid labelPosition=\"right\" compact primary basic/>\r\n      }\r\n    >\r\n      <Modal.Header>Import Excel File</Modal.Header>\r\n        <Modal.Content>\r\n            {displayError && errors ? <Segment style={{\r\n                color:\"red\"\r\n            }}>\r\n                <Label icon=\"times\" corner=\"right\" onClick={e => setDisplayError(false)} color=\"red\"/>\r\n                {errors}\r\n            </Segment> : null }\r\n        <Form onSubmit={e => e.preventDefault()}>\r\n            <Form.Field>\r\n                <label>Grade</label>\r\n                <Dropdown\r\n                        onChange={handleGradeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={gradeSelection}\r\n                        placeholder='Select Grade'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Excel file</label>\r\n               <input type=\"file\" onChange={handleExcelFileSelection}/>\r\n            </Form.Field>\r\n            <Button type=\"button\" loading={isLoading} primary content=\"Upload file\" fluid onClick={handleSubmit}/>\r\n        </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default PaperImport;",["287","288"],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\pages\\authorManagement.jsx",["289","290"],"import { useState, useEffect, useContext } from \"react\";\r\nimport { Card, Grid, Image, Label, Icon, Button } from 'semantic-ui-react';\r\n\r\nimport Navbar from \"../components/Navbar\"\r\nimport { PaperContext } from \"../context/paperContext\";\r\n// import AuthorList from \"../components/admin-panel/authorList\"\r\n// import NewAuthor from \"../components/admin-panel/newAuthor\"\r\n\r\nconst GradeDisplay = ({gradeName, isLive}) => {\r\n    console.log(isLive)\r\n    return (\r\n        <Card onClick={e => {\r\n            // take the guy to the details of the grade\r\n            console.log(\"Clicked\")\r\n        }}>\r\n            <Image src={`https://zoezi-staging3.herokuapp.com/img/${gradeName}.png`} fluid wrapped ui={false} />\r\n            <Card.Content textAlign=\"center\">\r\n                <Card.Header>{gradeName.toUpperCase()}</Card.Header>\r\n                <Card.Meta>\r\n                    <span className='date'>{isLive ? <Label basic color=\"green\">\r\n                       <Icon name=\"check circle outline\"/> Published\r\n                    </Label> \r\n                        : <Label basic color=\"orange\">\r\n                            <Icon name=\"cancel\"/> Not Published\r\n                        </Label>}</span>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button basic compact icon=\"eye\" color=\"green\" labelPosition=\"left\" content=\"Subjects\" fluid>\r\n                </Button>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst AuthorManagement = () => {\r\n    const { fetchAdminGrades, authToken } = useContext(PaperContext)\r\n    const [grades, setGrades] = useState([]);\r\n    const [errors, setErrors] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchAdminGrades(authToken)\r\n            .then(({ data }) => {\r\n                if (data && data.status) {\r\n                    return setGrades(data.grades);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setErrors([\r\n                    error.message\r\n                ])\r\n            })\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n        <Navbar/>\r\n            <Grid style={{marginTop:\"20px\"}}>\r\n                <Grid.Row>\r\n                    {grades && grades.map(({_id, grade, available }) => {\r\n                        return (\r\n                            <Grid.Column style={{ marginBottom: \"10px\" }} computer=\"4\" tablet=\"8\" mobile=\"8\" width=\"4\" key={_id}>\r\n                                <GradeDisplay gradeName={grade} isLive={available}/>\r\n                            </Grid.Column>\r\n                        )\r\n                    })}\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthorManagement;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\admin-panel\\author.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\admin-panel\\authorList.jsx",[],"C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\admin-panel\\newAuthor.jsx",["291"],"import { useState } from \"react\"\r\nimport { Button, Card, Container, Form, Dropdown, Segment, Grid } from \"semantic-ui-react\"\r\n\r\nconst options = [\r\n    { key: 'angular', text: 'Angular', value: 'angular' },\r\n    { key: 'css', text: 'CSS', value: 'css' },\r\n    { key: 'design', text: 'Graphic Design', value: 'design' },\r\n    { key: 'ember', text: 'Ember', value: 'ember' },\r\n    { key: 'html', text: 'HTML', value: 'html' },\r\n  ]\r\n\r\n  const permissions = [\r\n    { key: 'review', text: 'Review', value: 'can:review' },\r\n    { key: 'write', text: 'Write', value: 'can:write' },\r\n  ]\r\n\r\nconst AllocationComp = () => {\r\n    return (\r\n        <Segment clearing padded>            \r\n            <Form.Field>\r\n                <Dropdown placeholder='Grade' fluid selection options={options} />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Dropdown placeholder='Subjects' fluid multiple selection options={options} />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Button type=\"button\" basic labelPosition=\"right\" content=\"delete\" icon=\"trash alternate outline\" compact color=\"red\"/>\r\n            </Form.Field>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nconst NewAuthor = () => {\r\n    const [gradeCount, setGradeCount] = useState([])\r\n\r\n    return (\r\n        // <Card fluid>\r\n        //     <Container>\r\n        <div style={{\r\n            marginTop:\"20px\"\r\n        }}>\r\n              <Form>\r\n            <Grid>\r\n                <Grid.Column width={5}>\r\n                    <Card fluid>\r\n                        <Card.Content>\r\n                            <Form.Field>\r\n                                <label>Author's Email</label>\r\n                                <input type=\"email\" required/>\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <label>Permissions</label>\r\n                                <Dropdown placeholder='Permissions' fluid multiple selection options={permissions} />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Button compact fluid content=\"CREATE AUTHOR\" icon=\"save\" basic color=\"green\" labelPosition=\"right\"/>\r\n                            </Form.Field>\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n                <Grid.Column width={11}>\r\n                    <Form.Field>\r\n                        <Button raised type=\"button\" onClick={() => {\r\n                            setGradeCount([...gradeCount,1])\r\n                        }} compact content=\"Grade\" icon=\"add\" basic color=\"green\" labelPosition=\"right\"/>\r\n                    </Form.Field>\r\n\r\n                    {/* create an allocation stuff */}\r\n                    {gradeCount.length ? <div style={{\r\n                        marginBottom:\"10px\"\r\n                    }}>\r\n                            {gradeCount.map((_,index) => {\r\n                                return (\r\n                                    <AllocationComp key={index}/>\r\n                                )\r\n                            })}\r\n                    </div> : null }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Form>\r\n        </div>\r\n\r\n        //     </Container>\r\n        // </Card>\r\n    )\r\n}\r\n\r\nexport default NewAuthor;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\SocketWatcher.jsx",["292"],"import { useContext,useEffect } from \"react\";\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\nconst SocketWatcher = () => {\r\n    const { authToken, socketIO, createNotification, fetchPapers } = useContext(PaperContext);\r\n\r\n    useEffect(() => {\r\n        if (authToken){\r\n            socketIO.emit('author regestration',{ authToken })\r\n        }\r\n    },[authToken])\r\n\r\n    socketIO.on(\"review paper\",(msg) => {\r\n        createNotification(\"success\", \"info\",String(msg))\r\n        fetchPapers(authToken)\r\n    });\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SocketWatcher;","C:\\Users\\USER\\benFiles\\ben\\zoezi\\mockEntryTool\\restserver\\zoezi-entry-tool\\src\\components\\FilterComp.jsx",[],{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","severity":1,"message":"298","line":1,"column":24,"nodeType":"299","messageId":"300","endLine":1,"endColumn":34},{"ruleId":"297","severity":1,"message":"301","line":2,"column":14,"nodeType":"299","messageId":"300","endLine":2,"endColumn":19},{"ruleId":"297","severity":1,"message":"302","line":2,"column":20,"nodeType":"299","messageId":"300","endLine":2,"endColumn":27},{"ruleId":"303","severity":1,"message":"304","line":17,"column":9,"nodeType":"305","messageId":"306","endLine":22,"endColumn":10},{"ruleId":"303","severity":1,"message":"304","line":26,"column":9,"nodeType":"305","messageId":"306","endLine":31,"endColumn":10},{"ruleId":"297","severity":1,"message":"307","line":6,"column":8,"nodeType":"299","messageId":"300","endLine":6,"endColumn":13},{"ruleId":"308","severity":1,"message":"309","line":83,"column":258,"nodeType":"310","endLine":83,"endColumn":282},{"ruleId":"311","severity":1,"message":"312","line":4,"column":22,"nodeType":"313","messageId":"314","endLine":4,"endColumn":24},{"ruleId":"297","severity":1,"message":"315","line":2,"column":14,"nodeType":"299","messageId":"300","endLine":2,"endColumn":21},{"ruleId":"316","severity":1,"message":"317","line":13,"column":7,"nodeType":"318","endLine":13,"endColumn":9,"suggestions":"319"},{"ruleId":"293","replacedBy":"320"},{"ruleId":"295","replacedBy":"321"},{"ruleId":"297","severity":1,"message":"322","line":2,"column":18,"nodeType":"299","messageId":"300","endLine":2,"endColumn":24},{"ruleId":"297","severity":1,"message":"323","line":2,"column":31,"nodeType":"299","messageId":"300","endLine":2,"endColumn":39},{"ruleId":"293","replacedBy":"324"},{"ruleId":"295","replacedBy":"325"},{"ruleId":"293","replacedBy":"326"},{"ruleId":"295","replacedBy":"327"},{"ruleId":"293","replacedBy":"328"},{"ruleId":"295","replacedBy":"329"},{"ruleId":"293","replacedBy":"330"},{"ruleId":"295","replacedBy":"331"},{"ruleId":"297","severity":1,"message":"332","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":16},{"ruleId":"316","severity":1,"message":"317","line":14,"column":7,"nodeType":"318","endLine":14,"endColumn":9,"suggestions":"333"},{"ruleId":"316","severity":1,"message":"334","line":49,"column":7,"nodeType":"318","endLine":49,"endColumn":9,"suggestions":"335"},{"ruleId":"316","severity":1,"message":"336","line":44,"column":7,"nodeType":"318","endLine":44,"endColumn":19,"suggestions":"337"},{"ruleId":"316","severity":1,"message":"338","line":66,"column":7,"nodeType":"318","endLine":66,"endColumn":49,"suggestions":"339"},{"ruleId":"293","replacedBy":"340"},{"ruleId":"295","replacedBy":"341"},{"ruleId":"293","replacedBy":"342"},{"ruleId":"295","replacedBy":"343"},{"ruleId":"316","severity":1,"message":"344","line":45,"column":7,"nodeType":"318","endLine":45,"endColumn":9,"suggestions":"345"},{"ruleId":"293","replacedBy":"346"},{"ruleId":"295","replacedBy":"347"},{"ruleId":"316","severity":1,"message":"348","line":42,"column":7,"nodeType":"318","endLine":42,"endColumn":9,"suggestions":"349"},{"ruleId":"308","severity":1,"message":"309","line":255,"column":67,"nodeType":"310","endLine":255,"endColumn":101},{"ruleId":"293","replacedBy":"350"},{"ruleId":"295","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":19,"column":11,"nodeType":"354","endLine":19,"endColumn":34},{"ruleId":"297","severity":1,"message":"355","line":1,"column":39,"nodeType":"299","messageId":"300","endLine":1,"endColumn":48},{"ruleId":"297","severity":1,"message":"356","line":1,"column":50,"nodeType":"299","messageId":"300","endLine":1,"endColumn":57},{"ruleId":"352","severity":1,"message":"353","line":11,"column":9,"nodeType":"354","endLine":11,"endColumn":54},{"ruleId":"357","severity":1,"message":"358","line":30,"column":11,"nodeType":"354","endLine":30,"endColumn":14},{"ruleId":"357","severity":1,"message":"358","line":30,"column":35,"nodeType":"354","endLine":30,"endColumn":38},{"ruleId":"357","severity":1,"message":"358","line":34,"column":11,"nodeType":"354","endLine":34,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":35,"column":13,"nodeType":"354","endLine":35,"endColumn":54},{"ruleId":"357","severity":1,"message":"358","line":37,"column":11,"nodeType":"354","endLine":37,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":38,"column":13,"nodeType":"354","endLine":38,"endColumn":54},{"ruleId":"357","severity":1,"message":"358","line":69,"column":11,"nodeType":"354","endLine":69,"endColumn":14},{"ruleId":"357","severity":1,"message":"358","line":90,"column":11,"nodeType":"354","endLine":90,"endColumn":14},{"ruleId":"357","severity":1,"message":"358","line":90,"column":39,"nodeType":"354","endLine":90,"endColumn":42},{"ruleId":"357","severity":1,"message":"358","line":94,"column":11,"nodeType":"354","endLine":94,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":95,"column":13,"nodeType":"354","endLine":95,"endColumn":54},{"ruleId":"357","severity":1,"message":"358","line":97,"column":11,"nodeType":"354","endLine":97,"endColumn":14},{"ruleId":"352","severity":1,"message":"353","line":98,"column":13,"nodeType":"354","endLine":98,"endColumn":54},{"ruleId":"297","severity":1,"message":"359","line":15,"column":12,"nodeType":"299","messageId":"300","endLine":15,"endColumn":30},{"ruleId":"293","replacedBy":"360"},{"ruleId":"295","replacedBy":"361"},{"ruleId":"316","severity":1,"message":"362","line":23,"column":7,"nodeType":"318","endLine":23,"endColumn":23,"suggestions":"363"},{"ruleId":"316","severity":1,"message":"364","line":46,"column":7,"nodeType":"318","endLine":46,"endColumn":9,"suggestions":"365"},{"ruleId":"293","replacedBy":"366"},{"ruleId":"295","replacedBy":"367"},{"ruleId":"297","severity":1,"message":"368","line":39,"column":12,"nodeType":"299","messageId":"300","endLine":39,"endColumn":18},{"ruleId":"316","severity":1,"message":"369","line":53,"column":7,"nodeType":"318","endLine":53,"endColumn":9,"suggestions":"370"},{"ruleId":"297","severity":1,"message":"371","line":2,"column":24,"nodeType":"299","messageId":"300","endLine":2,"endColumn":33},{"ruleId":"316","severity":1,"message":"372","line":11,"column":7,"nodeType":"318","endLine":11,"endColumn":18,"suggestions":"373"},"no-native-reassign",["374"],"no-negated-in-lhs",["375"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","'Segment' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'SCard' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Divider' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authToken' and 'fetchPapers'. Either include them or remove the dependency array.","ArrayExpression",["376"],["374"],["375"],"'Header' is defined but never used.","'Checkbox' is defined but never used.",["374"],["375"],["374"],["375"],["374"],["375"],["374"],["375"],"'Button' is defined but never used.",["377"],"React Hook useEffect has missing dependencies: 'authToken' and 'createNotification'. Either include them or remove the dependency array.",["378"],"React Hook useEffect has missing dependencies: 'authToken', 'paperID', and 'searchForQuestions'. Either include them or remove the dependency array.",["379"],"React Hook useEffect has missing dependencies: 'authToken', 'fetchQuestions', 'isSubmittedDispatch', and 'updatePaperDetails'. Either include them or remove the dependency array.",["380"],["374"],["375"],["374"],["375"],"React Hook useEffect has a missing dependency: 'retrievedQuestion'. Either include it or remove the dependency array.",["381"],["374"],["375"],"React Hook useEffect has missing dependencies: 'fetched_questions' and 'isSubmitted'. Either include them or remove the dependency array. If 'setPaperQuestions' needs the current value of 'fetched_questions', you can also switch to useReducer instead of useState and read 'fetched_questions' in the reducer.",["382"],["374"],["375"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useMemo' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'processingMessages' is assigned a value but never used.",["374"],["375"],"React Hook useEffect has missing dependencies: 'isRefreshing' and 'setIsRefreshingDispatch'. Either include them or remove the dependency array.",["383"],"React Hook useEffect has a missing dependency: 'authToken'. Either include it or remove the dependency array.",["384"],["374"],["375"],"'errors' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authToken' and 'fetchAdminGrades'. Either include them or remove the dependency array.",["385"],"'Container' is defined but never used.","React Hook useEffect has a missing dependency: 'socketIO'. Either include it or remove the dependency array.",["386"],"no-global-assign","no-unsafe-negation",{"desc":"387","fix":"388"},{"desc":"387","fix":"389"},{"desc":"390","fix":"391"},{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},"Update the dependencies array to be: [authToken, fetchPapers]",{"range":"408","text":"409"},{"range":"410","text":"409"},"Update the dependencies array to be: [authToken, createNotification]",{"range":"411","text":"412"},"Update the dependencies array to be: [authToken, paperID, searchForQuestions, searchTerm]",{"range":"413","text":"414"},"Update the dependencies array to be: [paperID, currentActivePage, isRefreshing, fetchQuestions, authToken, isSubmittedDispatch, updatePaperDetails]",{"range":"415","text":"416"},"Update the dependencies array to be: [retrievedQuestion]",{"range":"417","text":"418"},"Update the dependencies array to be: [fetched_questions, isSubmitted]",{"range":"419","text":"420"},"Update the dependencies array to be: [isRefreshing, searchCategory, setIsRefreshingDispatch]",{"range":"421","text":"422"},"Update the dependencies array to be: [authToken]",{"range":"423","text":"424"},"Update the dependencies array to be: [authToken, fetchAdminGrades]",{"range":"425","text":"426"},"Update the dependencies array to be: [authToken, socketIO]",{"range":"427","text":"428"},[442,444],"[authToken, fetchPapers]",[466,468],[1776,1778],"[authToken, createNotification]",[1399,1411],"[authToken, paperID, searchForQuestions, searchTerm]",[2210,2252],"[paperID, currentActivePage, isRefreshing, fetchQuestions, authToken, isSubmittedDispatch, updatePaperDetails]",[2160,2162],"[retrievedQuestion]",[1367,1369],"[fetched_questions, isSubmitted]",[777,793],"[isRefreshing, searchCategory, setIsRefreshingDispatch]",[1372,1374],"[authToken]",[2052,2054],"[authToken, fetchAdminGrades]",[364,375],"[authToken, socketIO]"]
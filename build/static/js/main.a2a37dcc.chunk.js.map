{"version":3,"sources":["context/actionTypes.js","context/reducer.js","context/paperContext.js","components/SModal.jsx","components/FolderComp.jsx","components/paperimport.jsx","components/KcpePapers.jsx","components/RecursiveFolderComp.jsx","components/SideBar.jsx","components/SCard.jsx","components/topic.jsx","components/normalQues.jsx","components/comprehension.jsx","components/cbc.jsx","components/question.jsx","components/StatusComp.jsx","components/paper.jsx","components/FilterComp.jsx","components/SearchForm.jsx","components/paperhoc.jsx","images/adminfavi.jpg","components/Navbar.jsx","components/ContentPage.jsx","components/FormComp.jsx","pages/login.jsx","routes/ProtectedRoute.js","components/SocketWatcher.jsx","App.js","index.js"],"names":["SET_SOCKETIO_ID","INVALIDATE_SOCKETIO_ID","SET_LOGIN_TOKEN","UNSET_LOGIN_TOKEN","UPDATE_IS_SUBMITTED","FETCH_PAPERS","CHANGE_CURRENT_PAPER_DETAILS","CHANGE_PAPER_ID","CREATE_PAPER","IS_REFRESHING","CHANGE_ROOT_PAPER_ID","CHANGE_SPECIAL_PAPER_ID","IS_SPECIAL_PAPER_MODAL_OPEN","reducer","state","action","type","produce","newState","socket_io_id","payload","authToken","token","roles","isSubmitted","isSpecialPaper","isSpecialPaperModalOpen","rootPaperID","rootPaperName","paperID","paperName","paperGrade","paperSubject","paperType","papers","spapers","isRefreshing","draft","npapers","forEach","paper","push","name","id","_id","spaper","myLocalState","grade","subject","localState","axios","defaults","baseURL","process","socketIO","io","initialContext","localStorage","getItem","exp","jwt_decode","Date","now","error","verifyToken","split","currentQuestions","PaperContext","createContext","PaperProvider","children","useReducer","dispatch","on","createNotification","notificationTitle","notificationType","notificationMessage","store","addNotification","title","message","insert","container","animationIn","animationOut","dismiss","duration","onScreen","Provider","value","changeSpecialPaperModalVisibility","changeRootPaperID","updatePaperDetails","details","changeSpecialPaperID","changePaperID","createPaperDispatch","post","headers","AuthToken","then","data","success","errors","catch","fetchPapers","get","Error","fetchQuestions","is_special_paper","page_num","setIsSample","questionID","isSample","isSubmittedDispatch","condition","addQuestion","questionSent","is_special","searchForQuestions","searchTerm","removeQuestionDispatch","questionId","delete","loginDispatch","loginCreds","console","log","setItem","approveQuestionDispatch","index","submitPaperDispatch","clientID","logoutDispatcher","removePaper","setIsRefreshingDispatch","status","fetchAdminGrades","SModal","createPaper","useContext","useState","open","setOpen","gradeSelection","setGradeSelection","subjectSelection","setSubjectSelection","paperTypeSelection","setPaperTypeSelection","displaySubjects","setDisplaySubjects","setPaper","useEffect","paperTypesFetched","paperTypeCanDo","map","x","key","replaceAll","text","gradesFetched","contentCanDo","subjectsMapping","reduce","acc","current","subjects","Modal","onClose","onOpen","size","trigger","Button","basic","compact","fluid","primary","content","icon","labelPosition","Header","Content","Form","Field","Dropdown","onChange","_","selection","options","placeholder","Actions","Group","color","onClick","e","preventDefault","Or","positive","FolderComp","handlePaperSelect","isOpen","setIsOpen","style","marginBottom","as","cursor","Icon","marginLeft","hidden","List","divided","verticalAlign","pp","isSelected","Item","onContextMenu","_handlePaperSelectContextMenu","textDecoration","charAt","toUpperCase","slice","PaperImport","isLoading","setIsLoading","setErrors","displayError","setDisplayError","excelFile","marginTop","Segment","Label","corner","onSubmit","target","files","loading","formData","FormData","Object","entries","filter","append","finally","KcpePaper","isPastpaper","setIsPastPaper","time","setTime","isTimed","setIsTimed","supported_subjects","availableSubjects","setAvailableSubjects","name_or_year","handleNameOrYearSelection","old","toLowerCase","min","max","getFullYear","Message","Checkbox","label","defaultTime","inputVisible","split_time","paperDescription","rootID","RFolderComp","parentName","rootPath","isRootFolder","isFileDisplay","setIsFileDisplay","setFiles","areFiles","folders","_handleFolderSelectContextMenu","RecursiveFolderComp","keys","length","Divider","horizontal","SideBar","paper_id","padding","borderRadius","border","height","overflowY","p_index","SCard","rest","Card","Topic","handleTopicAndSubject","topic","subtopic","inline","EDITOR_OPTIONS","NormalQuestionComp","saveQuestionToDatabase","retrievedQuestion","isReviewer","useCallback","role_required","includes","check_role","question","setQuestion","subTopic","setTopic","setOptions","additionalInfo","setAdditionalInfo","initialQuestion","initialOptions","options_next","option","isCorrect","initialAdditional","initialTopicAndSubtopic","createdQuestion","questionType","question_id","autoFocus","buttonList","setContents","showToolbar","enableToolbar","disabled","foundOption","widths","defaultChecked","localOptions","onOptionSet","handleOptionsInput","circular","event","splice","removeOption","Comprehension","innerQuestion","setInnerQuestion","comprehension_question","iq","q_index","innerQues","removeInnerQuestion","handleInnerQuestionInputE","handleAddInnerQuestionOptions","parentIndex","handleOptionSet","handleAddAdditionalInfo","handleAdditionalTextE","CBCQuestionComp","NORMAL_QUESTION","COMPREHENSION_QUESTION","QuestionComp","updatePaperContent","setQuestionType","defaultValue","renderAllreadyFilled","renderComp","StatusComp","isActive","setIsActive","setIsSubmitted","setProcessingMessages","setStatusSteps","msg","before","setTimeout","Dimmer","active","Loader","CAN_REVIEW","Paper","fetched_questions","pageCount","setCurrectActivePage","currentActivePage","Array","fill","isHidden","setIsHidden","paperQuestions","setPaperQuestions","is_submitted","new_question","local_paper_copy","approveAuthorQuestion","paperQuestionsCopy","updateQuestionsState","div","initial","opacity","animate","borderBottom","paddingBottom","window","confirm","margin","Detail","paddingRight","paddingLeft","Fragment","clone_state","toggleQuestionVisibility","textAlign","internalSetIsSample","isExposed","question_object","cleanUpFunc","removeQuestion","Transition","visible","animation","Pagination","onPageChange","activePage","defaultActivePage","totalPages","tagOptions","FilterComp","setChooseCategory","SearchForm","setParentSearchTerm","setSearchTerm","searchCategory","setSearchCategory","searchString","queryString","stringify","width","PaperHOC","fetchedQuestions","setFetchedQuestions","setPageCount","setError","questions","Navbar","Menu","attached","header","Link","to","src","AdminFavi","alt","position","ContentPage","Container","Grid","Row","Column","FormComp","email","password","loginData","setLoginData","handleInputChange","LoginForm","marginRight","ProtectedRoute","Component","component","SocketWatcher","emit","String","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2a37dcc.chunk.js","sourcesContent":["export const SET_SOCKETIO_ID = 'SET_SOCKETIO_ID';\r\nexport const INVALIDATE_SOCKETIO_ID = 'INVALIDATE_SOCKETIO_ID';\r\nexport const SET_LOGIN_TOKEN = 'SET_LOGIN_TOKEN';\r\nexport const UNSET_LOGIN_TOKEN = 'UNSET_LOGIN_TOKEN';\r\nexport const UPDATE_IS_SUBMITTED = 'UPDATE_IS_SUBMITTED';\r\nexport const ADD_QUESTION_TO_STACK = 'ADD_QUESTION_TO_STACK';\r\nexport const FETCH_PAPERS = 'FETCH_PAPERS';\r\nexport const CHANGE_CURRENT_PAPER_DETAILS = 'CHANGE_CURRENT_PAPER_DETAILS';\r\nexport const CHANGE_PAPER_ID = 'CHANGE_PAPER_ID';\r\nexport const CREATE_PAPER = 'CREATE_PAPER';\r\nexport const IS_REFRESHING = 'IS_REFRESHING';\r\nexport const CHANGE_ROOT_PAPER_ID = \"CHANGE_ROOT_PAPER_ID\"\r\nexport const CHANGE_SPECIAL_PAPER_ID = \"CHANGE_SPECIAL_PAPER_ID\"\r\nexport const IS_SPECIAL_PAPER_MODAL_OPEN = \"IS_SPECIAL_PAPER_MODAL_OPEN\"","import produce from \"immer\";\r\nimport {\r\n    SET_SOCKETIO_ID,\r\n    INVALIDATE_SOCKETIO_ID,\r\n    SET_LOGIN_TOKEN,\r\n    UPDATE_IS_SUBMITTED,\r\n    FETCH_PAPERS,\r\n    CHANGE_CURRENT_PAPER_DETAILS,\r\n    CHANGE_PAPER_ID,\r\n    CREATE_PAPER,\r\n    UNSET_LOGIN_TOKEN,\r\n    IS_REFRESHING,\r\n    CHANGE_ROOT_PAPER_ID,\r\n    CHANGE_SPECIAL_PAPER_ID,\r\n    IS_SPECIAL_PAPER_MODAL_OPEN\r\n} from './actionTypes';\r\n\r\n// update this file later \r\nconst reducer = (state,action) => {\r\n    switch(action.type){\r\n        case SET_SOCKETIO_ID:\r\n            return produce(state,newState => {\r\n                newState.socket_io_id = action.payload;\r\n            })\r\n        case INVALIDATE_SOCKETIO_ID:\r\n            return produce(state,newState => {\r\n                newState.socket_io_id = null;\r\n            })\r\n        case SET_LOGIN_TOKEN:\r\n            return produce(state,newState => {\r\n                newState.authToken = action.payload.token;\r\n                newState.roles = action.payload.roles;\r\n            })\r\n        case UNSET_LOGIN_TOKEN:\r\n            return produce(state,newState => {\r\n                newState.authToken = null;\r\n                newState.roles = null;\r\n                newState.isSubmitted = false;\r\n                newState.isSpecialPaper = false;\r\n                newState.isSpecialPaperModalOpen = false;\r\n                newState.rootPaperID = \"\";\r\n                newState.rootPaperName = \"\";\r\n                newState.paperID = \"\";\r\n                newState.paperName = \"\";\r\n                newState.paperGrade = \"\";\r\n                newState.paperSubject = \"\";\r\n                newState.paperType = \"\";\r\n                newState.papers = {};\r\n                newState.spapers = {};\r\n                // newState.socket_io_id = null; --> not sure about this one think about it\r\n                newState.isRefreshing = false;\r\n            })\r\n        case UPDATE_IS_SUBMITTED:\r\n            return produce(state,draft => {\r\n                draft.isSubmitted = action.payload;\r\n            })\r\n        case IS_REFRESHING:\r\n            return produce(state,draft => {\r\n                draft.isRefreshing = action.payload;\r\n            })\r\n        case FETCH_PAPERS:\r\n            return produce(state, newState => {\r\n               newState.papers = [];\r\n                // we need to do this twice for both special papers and this\r\n\r\n               action.payload.npapers.forEach(paper => {\r\n                    if(!newState.papers[paper.paperType]){\r\n                        newState.papers[paper.paperType] = {\r\n                            papers:[]\r\n                        };\r\n                    }\r\n                    newState.papers[paper.paperType].papers.push({name:paper.paperName,id:paper._id})\r\n               })\r\n\r\n               action.payload.spapers.forEach(spaper => {\r\n                    if(!newState.spapers[spaper.name]){\r\n                        newState.spapers[spaper.name] = {\r\n                            name:spaper.name,\r\n                            _id: spaper._id\r\n                        };\r\n                    }\r\n                })\r\n            })\r\n        case IS_SPECIAL_PAPER_MODAL_OPEN:\r\n            {\r\n                let myLocalState = {...state}\r\n                myLocalState.isSpecialPaperModalOpen = action.payload;\r\n                return myLocalState;\r\n            }\r\n        case CHANGE_CURRENT_PAPER_DETAILS:\r\n            return {\r\n                ...state,\r\n                paperGrade: action.payload.grade,\r\n                paperSubject: action.payload.subject,\r\n                paperName: action.payload.paperName,\r\n                paperType: action.payload.paperType\r\n            }\r\n\r\n        case CHANGE_ROOT_PAPER_ID:\r\n            {\r\n                let myLocalState = {...state}\r\n                myLocalState.rootPaperID = action.payload.rootPaperID;\r\n                myLocalState.rootPaperName = action.payload.rootPaperName;\r\n                return myLocalState;\r\n            }\r\n        case CHANGE_SPECIAL_PAPER_ID:\r\n            {\r\n                let myLocalState = {...state}\r\n                myLocalState.paperID = action.payload.paperID;\r\n                myLocalState.isSpecialPaper = true;\r\n                return myLocalState;\r\n            }\r\n\r\n        case CHANGE_PAPER_ID:\r\n            let myLocalState = {...state}\r\n            myLocalState.paperID = action.payload.paperID;\r\n            myLocalState.isSpecialPaper = false;\r\n            return myLocalState;\r\n\r\n        case CREATE_PAPER:\r\n            let localState = {...state,papers:{...state.papers}};\r\n\r\n            localState.paperID = action.payload._id;\r\n            localState.paperName = action.payload.paperName;\r\n\r\n            localState.paperGrade = action.payload.grade;\r\n            localState.paperSubject = action.payload.subject;\r\n            \r\n            if(!localState.papers[action.payload.paperType]){\r\n                localState.papers[action.payload.paperType] = { papers:[] };\r\n            }\r\n            \r\n            localState.papers[action.payload.paperType].papers.push({name:action.payload.paperName,id:action.payload._id});\r\n            return localState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React, { createContext, useReducer } from \"react\";\r\nimport { store } from 'react-notifications-component';\r\nimport axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nimport {\r\n    SET_SOCKETIO_ID,\r\n    INVALIDATE_SOCKETIO_ID,\r\n    SET_LOGIN_TOKEN,\r\n    UNSET_LOGIN_TOKEN,\r\n    UPDATE_IS_SUBMITTED,\r\n    FETCH_PAPERS,\r\n    CHANGE_CURRENT_PAPER_DETAILS,\r\n    CHANGE_PAPER_ID,\r\n    CHANGE_SPECIAL_PAPER_ID,\r\n    CREATE_PAPER,\r\n    IS_REFRESHING,\r\n    CHANGE_ROOT_PAPER_ID,\r\n    IS_SPECIAL_PAPER_MODAL_OPEN\r\n} from './actionTypes';\r\nimport reducer from \"./reducer\";\r\n\r\nconst verifyToken = () => {\r\n    try {\r\n        const token = localStorage.getItem(\"authToken\");\r\n        const { exp } = jwt_decode(token);\r\n        return Date.now() >= exp * 1000 ? null : token;\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\n// \"https://author-tool-backend.herokuapp.com\";\r\naxios.defaults.baseURL = process.env.REACT_APP_AUTHOR_SERVER_ENDPOINT; // 'http://localhost:3500/'; // \"https://author-tool-backend.herokuapp.com\";//'http://localhost:3500/';\r\nconst socketIO = io(process.env.REACT_APP_RABBIT_MQ_CONSUMER_ENDPOINT);\r\n\r\nlet initialContext = {\r\n    authToken: verifyToken(),\r\n    // remember to package this in the token and actually to verify them\r\n    roles: localStorage.getItem(\"roles\") ? localStorage.getItem(\"roles\").split(\",\") : [],\r\n    isSubmitted: false,\r\n    isSpecialPaper: false,\r\n    isSpecialPaperModalOpen: false,\r\n    rootPaperID: \"\", // used by special papers only\r\n    rootPaperName: \"\", // for special papers only ( I should seriously think about this design .... later though )\r\n    paperID: \"\",\r\n    paperName: \"\",\r\n    paperGrade: \"\",\r\n    paperSubject: \"\",\r\n    paperType: \"\",\r\n    currentQuestions: [],\r\n    papers: {},\r\n    spapers: {},\r\n    socket_io_id: null,\r\n    isRefreshing: false\r\n};\r\n\r\n// we also have special papers\r\nexport const PaperContext = createContext(initialContext);\r\n\r\nconst PaperProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialContext);\r\n\r\n    // find a way for listening for the login credential\r\n\r\n    socketIO.on('connect', () => {\r\n        dispatch({\r\n            type: SET_SOCKETIO_ID,\r\n            payload: socketIO.id\r\n        })\r\n    })\r\n\r\n    socketIO.on('disconnect', () => {\r\n        dispatch({\r\n            type: INVALIDATE_SOCKETIO_ID,\r\n        })\r\n    })\r\n\r\n    const createNotification = (notificationTitle, notificationType, notificationMessage) => {\r\n        store.addNotification({\r\n            title: notificationTitle,\r\n            message: notificationMessage,\r\n            type: notificationType,\r\n            insert: \"top\",\r\n            container: \"top-right\",\r\n            animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n            animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n            dismiss: {\r\n                duration: 2000,\r\n                onScreen: true\r\n            }\r\n        });\r\n    }\r\n\r\n    const changeSpecialPaperModalVisibility = (state) => {\r\n        dispatch({\r\n            type: IS_SPECIAL_PAPER_MODAL_OPEN,\r\n            payload: state\r\n        })\r\n    }\r\n\r\n    const removePaper = (paperID, authToken, is_special = false) => {\r\n        return axios.delete(`/remove-paper/${paperID}/${is_special}`, {\r\n            headers: { AuthToken: authToken }\r\n        });\r\n    }\r\n\r\n    const logoutDispatcher = () => {\r\n        dispatch({\r\n            type: UNSET_LOGIN_TOKEN\r\n        });\r\n    }\r\n\r\n    const searchForQuestions = (authToken, paperID, searchTerm, is_special = false) => {\r\n        return axios.get(`/search/${paperID}/${is_special}?${searchTerm}`, {\r\n            headers: { AuthToken: authToken }\r\n        });\r\n    }\r\n\r\n    const setIsSample = (authToken, questionID, isSample) => {\r\n        return axios.post(`/set-sample/${questionID}`, { isSample }, {\r\n                headers: { AuthToken: authToken }\r\n            })\r\n            .then(({ data }) => {\r\n                if (data.success) {\r\n                    createNotification(\"Success!\", \"success\", \"Question set/removed as sample\");\r\n                    return data.success\r\n                }\r\n\r\n                throw new Error(\"Failed to set question as sample\");\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\", \"danger\", error.message);\r\n                return false\r\n            })\r\n    }\r\n\r\n    // special paper change root id dispatcher\r\n    const changeRootPaperID = (rootPaperID, rootPaperName) => {\r\n        dispatch({\r\n            type: CHANGE_ROOT_PAPER_ID,\r\n            payload: {\r\n                rootPaperID,\r\n                rootPaperName\r\n            }\r\n        })\r\n    }\r\n\r\n    const loginDispatch = (loginCreds) => {\r\n        console.log(process.env.REACT_APP_AUTHOR_SERVER_ENDPOINT);\r\n        \r\n        axios.post(\"/user/login\", loginCreds)\r\n            .then(({ data }) => {\r\n                if (data.success) {\r\n                    localStorage.setItem(\"authToken\", data.token);\r\n                    localStorage.setItem(\"roles\", data.roles);\r\n                    dispatch({\r\n                        type: SET_LOGIN_TOKEN,\r\n                        payload: {\r\n                            token: data.token,\r\n                            roles: data.roles\r\n                        }\r\n                    })\r\n                    createNotification(\"Success!\", \"success\", \"Welcome\");\r\n                } else {\r\n                    throw new Error(\"There was an error\");\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\", \"danger\", error.message);\r\n            })\r\n    }\r\n\r\n    const updatePaperDetails = details => {\r\n        dispatch({\r\n            type: CHANGE_CURRENT_PAPER_DETAILS,\r\n            payload: {\r\n                grade: details.grade,\r\n                subject: details.subject,\r\n                paperName: details.paperName,\r\n                paperType: details.paperType\r\n            }\r\n        })\r\n    }\r\n    const isSubmittedDispatch = (condition) => {\r\n        dispatch({\r\n            type: UPDATE_IS_SUBMITTED,\r\n            payload: condition\r\n        })\r\n    }\r\n\r\n    const removeQuestionDispatch = (questionId, token) => {\r\n        return axios.delete(`/remove-question/${questionId}`, {\r\n            headers: {\r\n                AuthToken: token\r\n            }\r\n        })\r\n    }\r\n\r\n    const fetchQuestions = (paperID, token, is_special_paper = false, page_num = 0) => {\r\n        // we need an indication if its a special paper\r\n        return axios.get(`/paper-questions/${paperID}/${is_special_paper}/${page_num}`, {\r\n            headers: {\r\n                AuthToken: token\r\n            }\r\n        });\r\n    }\r\n\r\n    const addQuestion = (questionSent, token, is_special = false) => {\r\n        return axios.post(`/create-question/${is_special}`, questionSent, {\r\n            headers: {\r\n                AuthToken: token\r\n            }\r\n        });\r\n    }\r\n\r\n    // CHANGE_SPECIAL_PAPER_ID\r\n    const changeSpecialPaperID = (paperID) => {\r\n        dispatch({\r\n            type: CHANGE_SPECIAL_PAPER_ID,\r\n            payload: {\r\n                paperID\r\n            }\r\n        })\r\n    }\r\n\r\n    // change the status of the isSpecial tag to false ( this is a regular paper )\r\n    const changePaperID = (paperID) => {\r\n        dispatch({\r\n            type: CHANGE_PAPER_ID,\r\n            payload: {\r\n                paperID\r\n            }\r\n        })\r\n    }\r\n\r\n    const fetchPapers = (token) => {\r\n        axios.get(\"papers\", {\r\n                headers: {\r\n                    AuthToken: token\r\n                }\r\n            })\r\n            .then(({ data }) => {\r\n                if (data) {\r\n                    dispatch({\r\n                        type: FETCH_PAPERS,\r\n                        payload: data\r\n                    })\r\n                } else {\r\n                    throw new Error(\"Failed to fetch papers\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\", \"danger\", error.message);\r\n            })\r\n    }\r\n\r\n    const setIsRefreshingDispatch = (status) => {\r\n        dispatch({\r\n            type: IS_REFRESHING,\r\n            payload: status\r\n        })\r\n    }\r\n\r\n    // try to use the same tactic to create the special papers then dispatch the event\r\n    // now the event will fire to fetchPaper which fetches only the other type of papers\r\n\r\n    // here we create a paper\r\n    const createPaperDispatch = (paper, token) => {\r\n        axios.post(\"create-paper\", paper, {\r\n                headers: {\r\n                    AuthToken: token\r\n                }\r\n            })\r\n            .then(({ data }) => {\r\n                if (data.success) {\r\n                    dispatch({\r\n                        type: CREATE_PAPER,\r\n                        payload: data.paper\r\n                    });\r\n                    createNotification(\"Success!\", \"success\", \"Paper created successfully\");\r\n                } else {\r\n                    data.errors.forEach(error => {\r\n                        createNotification(\"Error!\", \"danger\", error);\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\", \"danger\", error.message);\r\n            })\r\n    }\r\n\r\n    const submitPaperDispatch = (clientID, paperID, token) => {\r\n        return axios.post(\"/submit-paper\", {\r\n            paperID,\r\n            clientID\r\n        }, {\r\n            headers: {\r\n                AuthToken: token\r\n            }\r\n        });\r\n    }\r\n\r\n    const approveQuestionDispatch = (id, index, token) => {\r\n        return axios.get(`approve-question/${id}`, {\r\n            headers: {\r\n                AuthToken: token\r\n            }\r\n        });\r\n    }\r\n\r\n    const fetchAdminGrades = AuthToken => {\r\n        return axios.get(`admin/grades`, {\r\n            headers: { AuthToken }\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <PaperContext.Provider value = {\r\n            {\r\n                ...state,\r\n                changeSpecialPaperModalVisibility,\r\n                changeRootPaperID,\r\n                updatePaperDetails,\r\n                changeSpecialPaperID,\r\n                changePaperID,\r\n                createPaperDispatch,\r\n                fetchPapers,\r\n                fetchQuestions,\r\n                setIsSample,\r\n                isSubmittedDispatch,\r\n                addQuestion,\r\n                searchForQuestions,\r\n                removeQuestionDispatch,\r\n                loginDispatch,\r\n                approveQuestionDispatch,\r\n                submitPaperDispatch,\r\n                createNotification,\r\n                logoutDispatcher,\r\n                removePaper,\r\n                setIsRefreshingDispatch,\r\n                fetchAdminGrades,\r\n                socketIO,\r\n            }\r\n        } > { children } </PaperContext.Provider>\r\n    );\r\n}\r\n\r\nexport default PaperProvider;","import React,{useState,useEffect,useContext} from \"react\";\r\nimport { Button, Form, Modal,Dropdown } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\nconst SModal = ({createPaper}) => {\r\n    const { authToken,createNotification } = useContext(PaperContext);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [gradeSelection,setGradeSelection] = useState([]);\r\n    const [subjectSelection,setSubjectSelection] = useState({});\r\n    const [paperTypeSelection,setPaperTypeSelection] = useState([]);\r\n    const [displaySubjects,setDisplaySubjects] = useState([]);\r\n    \r\n    const [paper,setPaper] = useState({\r\n        grade:\"\",\r\n        subject:\"\",\r\n        paperType:\"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n      axios.get(\"/user/metadata\",{\r\n        headers:{\r\n            AuthToken:authToken\r\n        }\r\n      })\r\n        .then(({ data }) => {\r\n          let paperTypesFetched = data.paperTypeCanDo.map((x,index) => {\r\n            return { key: `${x.replaceAll(\" \",\"\")}_${index}`, text: x, value: x }\r\n          })\r\n\r\n          setPaperTypeSelection(paperTypesFetched);\r\n\r\n          let gradesFetched = data.contentCanDo.map((x,index) => ({ key: `${x.grade}_${index}`, text: x.grade, value: x.grade}));\r\n          setGradeSelection(gradesFetched);\r\n\r\n          let subjectsMapping = data.contentCanDo.reduce((acc,current) => {\r\n            acc[current.grade] = current.subjects.map((x,index) => ({key: `${x.replaceAll(\" \",\"\")}_${index}`, text: x, value: x}));\r\n            return acc;\r\n          },{});\r\n\r\n          setSubjectSelection(subjectsMapping);\r\n        })\r\n        .catch(error => {\r\n          setOpen(false);\r\n          createNotification(\"Error!\",\"danger\",error.message);\r\n        })\r\n\r\n    },[]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        createPaper(paper);\r\n        setOpen(false);\r\n    }\r\n    \r\n    const handleGradeSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          grade:value\r\n        });\r\n        setDisplaySubjects(subjectSelection[value]);\r\n    }\r\n\r\n    const handleSubjectSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          subject:value\r\n        });\r\n    }\r\n\r\n    const handlePaperTypeSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          paperType:value\r\n        });\r\n    }\r\n\r\n    const handleOnClose = (e) => {\r\n      e.preventDefault();\r\n      setOpen(false);\r\n    }\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      size=\"tiny\"\r\n      open={open}\r\n      trigger={<Button basic compact fluid primary content='create paper' icon='pencil alternate' labelPosition='right'/>}\r\n    >\r\n      <Modal.Header>New Paper</Modal.Header>\r\n        <Modal.Content>\r\n        <Form>\r\n            <Form.Field>\r\n                <label>Grade</label>\r\n                <Dropdown\r\n                        onChange={handleGradeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={gradeSelection}\r\n                        placeholder='Select Grade'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Subject</label>\r\n                <Dropdown\r\n                        onChange={handleSubjectSelection}\r\n                        selection\r\n                        fluid\r\n                        options={displaySubjects}\r\n                        placeholder='Select Subject'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Paper Type</label>\r\n                <Dropdown\r\n                        onChange={handlePaperTypeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={paperTypeSelection}\r\n                        placeholder='Select Paper Type'\r\n                    />\r\n            </Form.Field> \r\n        </Form>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button.Group>\r\n            <Button color='black' onClick={handleOnClose}>Cancel</Button>\r\n            <Button.Or />\r\n            <Button onClick={handleSubmit} positive>Create Paper</Button>\r\n          </Button.Group>\r\n        </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default SModal;","import React, { useState, useContext, useEffect, useMemo } from 'react';\r\nimport { Icon, List, Header } from 'semantic-ui-react';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\n\r\n// this takes in the name of the folder and the contained files\r\nconst FolderComp = ({paperType,papers,handlePaperSelect}) => {\r\n    const [isOpen,setIsOpen] = useState(false);\r\n\r\n    const {\r\n        paperID\r\n    } = useContext(PaperContext);\r\n\r\n    \r\n\r\n    const _handlePaperSelectContextMenu = (e,paperID) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    \r\n    return (\r\n        <div style={{\r\n            marginBottom:\"6px\"\r\n        }}>\r\n            <Header as=\"h5\" onClick={() => setIsOpen(!isOpen)} style={{cursor:'pointer'}}>\r\n                <Icon color=\"yellow\" name={isOpen ? 'folder open' : 'folder'} />\r\n                {paperType}\r\n            </Header>\r\n\r\n            <div style={{marginLeft:\"10px\", marginBottom:\"10px\"}} hidden={!isOpen }>\r\n                        <List divided verticalAlign='middle'>\r\n                            {papers.map((pp,index) => {\r\n                                const isSelected = paperID === pp.id;\r\n                                return (\r\n                                    <List.Item key={`pp_${index}`} onContextMenu={(e) => _handlePaperSelectContextMenu(e,`${pp.id}`)}  onClick={() => handlePaperSelect(`${pp.id}`)}>\r\n                                        <List.Icon name={isSelected ?'file alternate' : 'file alternate outline'} />\r\n                                        <List.Content>\r\n                                            \r\n                                            <List.Header as='a'>\r\n                                                <div style={{\r\n                                                    textDecoration:isSelected ? \"underline\" : \"inherit\",\r\n                                                }}>\r\n                                                    {pp.name.charAt(0).toUpperCase() + pp.name.slice(1)}\r\n                                                </div>\r\n                                            </List.Header>\r\n                                        </List.Content>\r\n                                    </List.Item>\r\n                                );\r\n                            })}\r\n                        </List>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FolderComp;","import React,{useState,useEffect,useContext} from \"react\";\r\nimport { Button, Form, Modal,Dropdown, Segment, Label } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\nconst PaperImport = () => {\r\n    const { authToken, createNotification, fetchPapers } = useContext(PaperContext);\r\n    const [open, setIsOpen] = useState(false);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n\r\n    const [gradeSelection,setGradeSelection] = useState([]);\r\n    const [errors, setErrors] = useState(null);\r\n    const [displayError,setDisplayError] = useState(false);\r\n    \r\n    const [paper,setPaper] = useState({\r\n        grade:\"\",\r\n        paperType:\"\",\r\n        excelFile: null\r\n    });\r\n\r\n    const setOpen = (value) => {\r\n        setIsOpen(value);\r\n\r\n        if (!value){\r\n            setDisplayError(false);\r\n            setErrors(null);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n      axios.get(\"/user/metadata\",{\r\n        headers:{\r\n            AuthToken:authToken\r\n        }\r\n      })\r\n        .then(({ data }) => {\r\n          setGradeSelection(\r\n            data.contentCanDo.map((x,index) => ({ key: `${x.grade}_${index}`, text: x.grade, value: x.grade}))\r\n          );\r\n        })\r\n        .catch(error => {\r\n            setErrors(error.message);\r\n            setDisplayError(true);\r\n        })\r\n\r\n    },[authToken]);\r\n\r\n    const handleSubmit = () => {\r\n        setDisplayError(false);\r\n        setErrors(null);\r\n        setIsLoading(true);\r\n\r\n        const formData = new FormData();\r\n        \r\n        Object.entries(paper).filter(([x,_]) => x !== 'excelFile').forEach(([key,value]) => {\r\n            formData.append(key,value);\r\n        })\r\n        formData.append(\"excelFile\",paper.excelFile,paper.excelFile.name)\r\n\r\n        // submit the data the paper here\r\n        axios.post('/import-excel-paper',formData,{\r\n            headers:{ AuthToken:authToken }\r\n        })\r\n            .then(({ data }) => {\r\n                if (data){\r\n                    if (data.success){\r\n                        setOpen(false);\r\n                        createNotification(\"Success!\",\"success\",\"Imported data successfully\");\r\n                        fetchPapers(authToken);\r\n                        return;\r\n                    }\r\n                    throw new Error(data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setErrors(error.message);\r\n                setDisplayError(true);\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            })\r\n    }\r\n    \r\n    const handleGradeSelection = (_,{ value }) => {\r\n        setPaper({\r\n          ...paper,\r\n          grade:value\r\n        });\r\n    }\r\n\r\n    const handleExcelFileSelection = (e) => {\r\n        setPaper({\r\n            ...paper,\r\n            excelFile: e.target.files[0]\r\n        })\r\n    }\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      size=\"tiny\"\r\n      open={open}\r\n      trigger={\r\n        <Button content=\"import excel\" style={{\r\n            marginTop:\"5px\"\r\n        }} icon=\"upload\" fluid labelPosition=\"right\" compact primary basic/>\r\n      }\r\n    >\r\n      <Modal.Header>Import Excel File</Modal.Header>\r\n        <Modal.Content>\r\n            {displayError && errors ? <Segment style={{\r\n                color:\"red\"\r\n            }}>\r\n                <Label icon=\"times\" corner=\"right\" onClick={e => setDisplayError(false)} color=\"red\"/>\r\n                {errors}\r\n            </Segment> : null }\r\n        <Form onSubmit={e => e.preventDefault()}>\r\n            <Form.Field>\r\n                <label>Grade</label>\r\n                <Dropdown\r\n                        onChange={handleGradeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={gradeSelection}\r\n                        placeholder='Select Grade'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Excel file</label>\r\n               <input type=\"file\" onChange={handleExcelFileSelection}/>\r\n            </Form.Field>\r\n            <Button type=\"button\" loading={isLoading} primary content=\"Upload file\" fluid onClick={handleSubmit}/>\r\n        </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default PaperImport;","import React,{useState,useEffect,useContext} from \"react\";\r\nimport { Button, Form, Modal,Dropdown, Segment, Label, Checkbox, Message } from 'semantic-ui-react';\r\nimport TimePicker from 'reactjs-timepicker';\r\n\r\nimport axios from 'axios';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\nconst KcpePaper = () => {\r\n    const { authToken, rootPaperID, createNotification,isSpecialPaperModalOpen,changeSpecialPaperModalVisibility  } = useContext(PaperContext);\r\n    const [isPastpaper, setIsPastPaper] = useState(false);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n    const [time, setTime] = useState(\"\")\r\n    const [isTimed, setIsTimed] = useState(false)\r\n\r\n    // this should not be hardcoded\r\n    const [gradeSelection,setGradeSelection] = useState([\r\n        {key: \"index_0\", text: \"Model Paper\", value: \"Model Paper\"},\r\n        {key: \"index_1\", text: \"Past Paper\", value: \"Past Paper\"}\r\n    ]);\r\n\r\n    // create suggesters for other things\r\n    const supported_subjects = [\"Kiswahili\", \"English\", \"Mathematics\", \"Science\", \"SST&CRE\"]\r\n    const [availableSubjects,setAvailableSubjects] = useState([]);\r\n\r\n    const [errors, setErrors] = useState(null);\r\n    const [displayError,setDisplayError] = useState(false);\r\n    \r\n    const [paper,setPaper] = useState({\r\n        paperType:\"\",\r\n        name_or_year:\"\",\r\n        subject: \"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        setAvailableSubjects(supported_subjects.map((subject, index) => ({\r\n            key: `available_subject_${index}`,\r\n            text: subject,\r\n            value: subject\r\n        })))\r\n    }, [])\r\n\r\n    const setOpen = (value) => {\r\n        changeSpecialPaperModalVisibility(value);\r\n\r\n        if (!value){\r\n            setDisplayError(false);\r\n            setErrors(null);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        setIsLoading(true)\r\n        let split_time = time.split(\":\")\r\n        let duration = (((+split_time[0]) * 60) + (+split_time[1])) * 60000;\r\n\r\n        const paperDescription = {\r\n            ...paper,\r\n            isTimed,\r\n            duration,\r\n            rootID: rootPaperID,\r\n        }\r\n\r\n        axios.post(\"/special-paper\", paperDescription,{\r\n            headers: { AuthToken: authToken }\r\n        })\r\n            .then(({data}) => {\r\n                if (!(data.status)){\r\n                    throw new Error(\"Failed to create paper\");\r\n                }\r\n                createNotification(\"Success!\", \"success\", \"Paper created successfully\");\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\", \"danger\", \"Failed to create paper\")\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n                changeSpecialPaperModalVisibility(false)\r\n            })\r\n    }\r\n\r\n    const handleNameOrYearSelection = (e) => {\r\n        setPaper(old => ({\r\n            ...old,\r\n            name_or_year: e.target.value\r\n        }))\r\n    }\r\n    \r\n    const handlePaperTypeSelection = (_,{ value }) => {\r\n        setPaper(old => ({\r\n          ...old,\r\n          paperType:value\r\n        }));\r\n\r\n        setIsPastPaper(!(value.toLowerCase() === \"model paper\"))\r\n    }\r\n\r\n    const handleSubjectSelection = (_,{ value }) => {\r\n        setPaper(old => ({\r\n          ...old,\r\n          subject:value\r\n        }));\r\n    }\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      size=\"tiny\"\r\n      open={isSpecialPaperModalOpen}\r\n    >\r\n      <Modal.Header>KCPE model/past paper</Modal.Header>\r\n        <Modal.Content>\r\n            {displayError && errors ? <Segment style={{\r\n                color:\"red\"\r\n            }}>\r\n                <Label icon=\"times\" corner=\"right\" onClick={e => setDisplayError(false)} color=\"red\"/>\r\n                {errors}\r\n            </Segment> : null }\r\n        <Form onSubmit={e => e.preventDefault()}>\r\n            <Form.Field>\r\n                <label>Paper Type</label>\r\n                <Dropdown\r\n                        onChange={handlePaperTypeSelection}\r\n                        selection\r\n                        fluid\r\n                        options={gradeSelection}\r\n                        placeholder='Select Paper Type'\r\n                    />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>{isPastpaper ? \"Year\" : \"Paper Name\"}</label>\r\n\r\n                {isPastpaper ?\r\n                    <input type=\"number\" onChange={handleNameOrYearSelection} min=\"1986\" max={(new Date()).getFullYear() - 1}/>\r\n                    :\r\n                    <input type=\"text\" onChange={handleNameOrYearSelection}/>\r\n                }\r\n\r\n\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Subject</label>\r\n                <Dropdown\r\n                        onChange={handleSubjectSelection}\r\n                        selection\r\n                        fluid\r\n                        options={availableSubjects}\r\n                        placeholder='Select Subject'\r\n                    />\r\n            </Form.Field>\r\n\r\n            <Message>\r\n                <Form.Field>\r\n                    <Checkbox value={isTimed} onChange={() => setIsTimed(old => !old)} label=\"Is Timed\"/>\r\n                </Form.Field>\r\n\r\n                {isTimed ?\r\n                    <Form.Field>\r\n                        <TimePicker\r\n                            onChange={setTime}\r\n                            defaultTime={\"00:00\"}\r\n                            inputVisible={true}\r\n                            value={time}\r\n                            isOpen={false}\r\n                        />\r\n                    </Form.Field>\r\n                    : null }\r\n            </Message>\r\n            <Button type=\"button\" loading={isLoading} primary content=\"Create Paper\" fluid onClick={handleSubmit}/>\r\n        </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default KcpePaper;","import axios from 'axios';\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { Icon, List, Header, Divider } from 'semantic-ui-react';\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\n\r\n// this takes in the name of the folder and the contained files\r\n// rootfolder --> \r\nconst RFolderComp = ({ parentName, spaper, rootPath, isRootFolder = false }) => {\r\n    const { changeRootPaperID, authToken, paperID, changeSpecialPaperID, changeSpecialPaperModalVisibility } = useContext(PaperContext);\r\n    const [isOpen,setIsOpen] = useState(false);\r\n    const [isFileDisplay, setIsFileDisplay] = useState(false)\r\n    const [files, setFiles] = useState([])\r\n\r\n    const openFolder = () => {\r\n        setIsOpen(old => !old)\r\n\r\n        if (isRootFolder) {\r\n            changeRootPaperID(spaper._id, spaper.name)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            axios.get(`/special-paper/${rootPath}`, {\r\n                headers: { AuthToken: authToken }\r\n            }).then(({data}) => {\r\n                if (!data.status) {\r\n                    throw new Error(data.error || \"Unable to fetch folders\")\r\n                }\r\n                \r\n                setIsFileDisplay(data.files.areFiles)\r\n                setFiles(data.files.folders)\r\n\r\n                console.log(data.files.folders)\r\n\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        }\r\n    }, [isOpen])\r\n\r\n    const _handleFolderSelectContextMenu = (e, data) => {\r\n        e.preventDefault()\r\n        changeRootPaperID(spaper._id, spaper.name)\r\n\r\n        changeSpecialPaperModalVisibility(true)\r\n    }\r\n    \r\n    return (\r\n        <div style={{\r\n            marginLeft: isRootFolder ? \"inherit\" : \"18px\",\r\n            marginBottom:\"6px\"\r\n        }}>\r\n            <Header \r\n                as=\"h5\" onClick={openFolder} \r\n                onContextMenu={(e) => {\r\n                    return isRootFolder ? _handleFolderSelectContextMenu(e,'nothing') : null\r\n                }} \r\n                style={{cursor:'pointer'}}\r\n            >\r\n                <Icon color=\"yellow\" name={isOpen ? 'folder open' : 'folder'} />\r\n                {parentName}\r\n            </Header>\r\n\r\n            {isOpen ? !isFileDisplay ? \r\n                <>\r\n                    {files.map(({name, _id}) => {\r\n                        return <RFolderComp  parentName={name} spaper={{}} rootPath={`${rootPath}/${_id}`}/>\r\n                    })}\r\n                </> \r\n            :\r\n                <div style={{marginLeft:\"18px\", marginBottom:\"10px\"}} hidden={!isOpen }>\r\n                    <List divided verticalAlign='middle'>\r\n                        {files.map(({subject, _id},index) => {\r\n                            const isSelected = paperID === _id;\r\n                            return (\r\n                                <List.Item key={`pp_${index}`} onClick={() => changeSpecialPaperID(`${_id}`)}>\r\n                                    <List.Icon name={isSelected ?'file alternate' : 'file alternate outline'} />\r\n                                    <List.Content>\r\n                                        \r\n                                        <List.Header as='a'>\r\n                                            <div style={{\r\n                                                textDecoration:isSelected ? \"underline\" : \"inherit\",\r\n                                            }}>\r\n                                                {subject.charAt(0).toUpperCase() + subject.slice(1)}\r\n                                            </div>\r\n                                        </List.Header>\r\n                                    </List.Content>\r\n                                </List.Item>\r\n                            );\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst RecursiveFolderComp = () => {\r\n    const { spapers } = useContext(PaperContext);\r\n\r\n    // for now we set only the top level elements as root its\r\n\r\n    return (\r\n        <div>\r\n            {Object.keys(spapers).length ? <Divider horizontal>special papers</Divider> : null }\r\n\r\n            {Object.entries(spapers).map(([name, spaper]) => {\r\n                return <RFolderComp \r\n                    parentName={name} spaper={spaper} \r\n                    rootPath={spaper._id} isRootFolder={true}\r\n                />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecursiveFolderComp;","import React,{useEffect,useContext} from 'react';\r\nimport { Button, Divider } from 'semantic-ui-react';\r\n\r\nimport {PaperContext} from \"../context/paperContext\";\r\nimport SModal from './SModal';\r\nimport FolderComp from './FolderComp';\r\nimport PaperImport from './paperimport';\r\nimport KcpePaper from './KcpePapers';\r\nimport RecursiveFolderComp from './RecursiveFolderComp';\r\n\r\nconst SideBar = () => {\r\n    const {changePaperID,createPaperDispatch,papers,authToken,fetchPapers} = useContext(PaperContext);\r\n    \r\n    useEffect(() => {\r\n        fetchPapers(authToken);\r\n    },[]);\r\n\r\n    const createPaper = (paper) => {\r\n        createPaperDispatch(paper,authToken);\r\n    }\r\n\r\n    const handlePaperSelect = (paper_id) => {\r\n        changePaperID(paper_id);\r\n    }\r\n\r\n    // create a folder view for these files and groupings\r\n    // check for the active paper then highlight it for visibility's sake\r\n    return (\r\n        <>\r\n            <div style={{padding:\"5px\", borderRadius:\"5px\", border:\"1px solid grey\"}}>\r\n                <SModal createPaper={createPaper}/>\r\n                <KcpePaper/>\r\n                <PaperImport/>\r\n            </div>\r\n\r\n            <div  style={{height:\"85vh\", overflowY:\"scroll\", marginTop:\"10px\", padding:\"10px\"}}>\r\n                <Divider horizontal>my papers</Divider>\r\n\r\n                {Object.keys(papers).map((paperType,p_index) => {\r\n                    return (\r\n                        <FolderComp key={`pt_${p_index}`} handlePaperSelect={handlePaperSelect}\r\n                            paperType={paperType}\r\n                            papers = {papers[paperType].papers}\r\n                        />\r\n                    );\r\n                })}\r\n                <RecursiveFolderComp/>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SideBar;","import React from 'react';\r\nimport {Card} from 'semantic-ui-react';\r\n\r\nconst SCard = ({children,...rest}) => {\r\n    return (\r\n        <Card fluid={true} {...rest}>\r\n            <Card.Content>\r\n                {children}\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default SCard;","import React from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\n\r\nconst Topic = ({handleTopicAndSubject, topic = \" \", subtopic = \" \"}) => {\r\n    return (\r\n        <Form.Group inline>\r\n            <Form.Field>\r\n                <label>Topic</label>\r\n                <input name=\"topic\" value={topic} onChange={handleTopicAndSubject} placeholder='Topic' />\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <label>Sub Topic</label>\r\n                <input name=\"subTopic\" value={subtopic} onChange={handleTopicAndSubject} placeholder='Sub Topic' />\r\n            </Form.Field>\r\n        </Form.Group>\r\n    );\r\n}\r\n\r\nexport default Topic;","import React,{useState,useEffect,useCallback, useContext} from \"react\";\r\nimport SunEditor from 'suneditor-react';\r\nimport {Button,Icon,Form,Checkbox} from \"semantic-ui-react\";\r\n\r\nimport Topic from './topic';\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\nconst QUESTION_TYPE = \"normal\";\r\nconst EDITOR_OPTIONS = [\r\n    ['undo', 'redo', 'font', 'fontSize', 'formatBlock'],\r\n    ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'removeFormat'],\r\n    ['fontColor', 'hiliteColor', 'outdent', 'indent', 'align', 'horizontalRule', 'list', 'table'],\r\n    ['image', 'fullScreen', 'showBlocks', 'preview']\r\n];\r\n\r\nconst CAN_REVIEW = \"can:review\";\r\n\r\n// use the index to change the question's content on save or updating\r\nconst NormalQuestionComp = ({saveQuestionToDatabase,retrievedQuestion = {},index,isSubmitted = false}) => {\r\n    const { roles } = useContext(PaperContext);\r\n    const check_role = useCallback((role_required) => roles.includes(role_required),[roles]);\r\n    const isReviewer = check_role(CAN_REVIEW);\r\n\r\n    const [question,setQuestion] = useState(\"\");\r\n    const [topic,setTopic] = useState({ topic:\" \", subTopic:\" \" });\r\n    const [options,setOptions] = useState([]);\r\n    const [additionalInfo,setAdditionalInfo] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let initialQuestion = retrievedQuestion && retrievedQuestion.question ? retrievedQuestion.question : \"\";    \r\n        let initialOptions = retrievedQuestion && retrievedQuestion.options_next ?retrievedQuestion.options_next.map(({option,isCorrect}) => {\r\n            return {option,isCorrect};\r\n        })  : [];\r\n        let initialAdditional = retrievedQuestion && retrievedQuestion.additionalInfo ? retrievedQuestion.additionalInfo : \"\";\r\n        \r\n        let initialTopicAndSubtopic = retrievedQuestion && retrievedQuestion.topic ? {\r\n            topic: retrievedQuestion.topic,\r\n            subTopic: retrievedQuestion.subTopic\r\n        } : { topic:\" \", subTopic:\" \" };\r\n\r\n        setTopic(initialTopicAndSubtopic);\r\n        setQuestion(initialQuestion);\r\n        setOptions(initialOptions);\r\n        setAdditionalInfo(initialAdditional);\r\n    },[]);\r\n\r\n    const handleSetTopic = (e) => {\r\n        setTopic({\r\n            ...topic,\r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n\r\n    const handleAddOptions = (e) => {\r\n        e.preventDefault();\r\n        setOptions([...options,{option:\"\",isCorrect:false}]);\r\n    }\r\n\r\n    const handleOptionsInput = (e,index) => {\r\n        let localOptions = [...options];\r\n        localOptions[index].option = e.target.value;\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const onOptionSet = (index) => {\r\n        let localOptions = [...options];\r\n        localOptions[index].isCorrect = !localOptions[index].isCorrect;\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const removeOption = (event,index) => {\r\n        event.preventDefault();\r\n        let localOptions = [...options];\r\n        localOptions.splice(index,1);\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const handleAddAdditionalInfo = (e) => {\r\n        e.preventDefault();\r\n        setAdditionalInfo(\" \");\r\n    }\r\n\r\n    const handleAdditionalTextE = (text) => {\r\n        setAdditionalInfo(text);\r\n    }\r\n\r\n    const saveQuestion = (e) => {\r\n        e.preventDefault();\r\n\r\n        let createdQuestion = {\r\n            questionType: QUESTION_TYPE,\r\n            question_id: retrievedQuestion ? retrievedQuestion._id : null,\r\n            question,\r\n            options_next:options,\r\n            topic: topic.topic,\r\n            subTopic: topic.subTopic,\r\n            additionalInfo:additionalInfo ? additionalInfo : \"\"\r\n        }\r\n\r\n        saveQuestionToDatabase(createdQuestion,index);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={saveQuestion}>\r\n            <Topic handleTopicAndSubject={handleSetTopic} topic={topic.topic} subtopic={topic.subTopic}/>\r\n            <Form.Field>\r\n                <SunEditor autoFocus={true}  setOptions={{\r\n                      buttonList : EDITOR_OPTIONS,\r\n                }} onChange={(content) => setQuestion(content) } setContents={question} showToolbar={true} enableToolbar={true}/>\r\n            </Form.Field>\r\n            <Form.Field>\r\n                <Button type=\"button\" compact primary disabled={isSubmitted && !isReviewer} onClick={handleAddOptions} icon=\"add\" content=\"Option\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n            \r\n                {options.map((foundOption,index) => {\r\n                    return (\r\n                        <Form.Field key={`option_${index}`}>\r\n                            <Form.Group widths=\"1\" inline>\r\n                                <Form.Field>\r\n                                    <Checkbox disabled={isSubmitted && !isReviewer} defaultChecked={retrievedQuestion && foundOption.isCorrect ? true : false} onClick={(e) => onOptionSet(index)}/>\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <input value={retrievedQuestion ? foundOption.option : null} onChange={(e) => handleOptionsInput(e,index)} type=\"text\"/>\r\n                                </Form.Field>\r\n\r\n                                <Button type=\"button\" circular icon=\"superscript\" disabled={isSubmitted && !isReviewer} compact basic color=\"teal\"/>\r\n\r\n                                <Button type=\"button\" circular compact basic color=\"red\" disabled={isSubmitted && !isReviewer} icon onClick={(e) => removeOption(e,index)}>\r\n                                    <Icon name=\"trash alternate outline\"/>\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Form.Field>\r\n                    );\r\n                })}\r\n            \r\n            <Form.Field>\r\n                <Button type=\"button\" compact primary disabled={(additionalInfo?true:false) || isSubmitted } onClick={handleAddAdditionalInfo} content=\"Additional Information\" icon=\"add\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n            <Form.Field>\r\n               {additionalInfo ? \r\n                    <SunEditor autoFocus={true}  setOptions={{\r\n                        buttonList : EDITOR_OPTIONS,\r\n                  }} onChange={(content) => handleAdditionalTextE(content) } setContents={additionalInfo} showToolbar={true} enableToolbar={true}/>\r\n                    :null\r\n                } \r\n            </Form.Field>\r\n            <Button basic color=\"green\" content='Save Question' disabled={isSubmitted && !isReviewer} icon='save' labelPosition='right'/>\r\n        </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NormalQuestionComp;","import React,{useState, useCallback, useContext} from \"react\";\r\nimport SunEditor from 'suneditor-react';\r\nimport {Button,Form,Checkbox,Header} from \"semantic-ui-react\";\r\n\r\nimport Topic from './topic';\r\nimport SCard from './SCard';\r\nimport {PaperContext} from '../context/paperContext';\r\n\r\nconst COMPREHENSION_QUESTION = \"comprehension\";\r\nconst EDITOR_OPTIONS = [\r\n    ['undo', 'redo', 'font', 'fontSize', 'formatBlock'],\r\n    ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'removeFormat'],\r\n    ['fontColor', 'hiliteColor', 'outdent', 'indent', 'align', 'horizontalRule', 'list', 'table'],\r\n    ['image', 'fullScreen', 'showBlocks', 'preview']\r\n];\r\nconst CAN_REVIEW = \"can:review\";\r\n\r\nconst Comprehension = ({saveQuestionToDatabase,retrievedQuestion,index,isSubmitted = false}) => {\r\n    const { roles } = useContext(PaperContext);\r\n    const check_role = useCallback((role_required) => roles.includes(role_required),[roles]);\r\n    const isReviewer = check_role(CAN_REVIEW)\r\n\r\n    const [question,setQuestion] = useState(retrievedQuestion ? retrievedQuestion.question : \"\");\r\n    const [topic,setTopic] = useState(retrievedQuestion && retrievedQuestion.topic ? {\r\n        topic: retrievedQuestion.topic,\r\n        subTopic: retrievedQuestion.subTopic\r\n    } : {\r\n        topic:\" \",\r\n        subTopic:\" \"\r\n    });\r\n\r\n   const [innerQuestion,setInnerQuestion] = useState(retrievedQuestion ? retrievedQuestion.children.map(({options,...rest})=> {\r\n        return {\r\n            ...rest,\r\n            options:options.map(({option,isCorrect}) => {\r\n                return {option,isCorrect}\r\n            })\r\n        }\r\n   }) : []);\r\n\r\n   const saveQuestion = (e) => {\r\n       e.preventDefault();\r\n       let comprehension_question = {\r\n           questionType:COMPREHENSION_QUESTION,\r\n           question,\r\n           question_id: retrievedQuestion ? retrievedQuestion._id : null,\r\n           children:innerQuestion,\r\n           topic: topic.topic,\r\n           subTopic: topic.subTopic,\r\n       }\r\n\r\n       saveQuestionToDatabase(comprehension_question,index);\r\n   }\r\n\r\n   const handleAddQuestion = (e) => {\r\n       e.preventDefault();\r\n       setInnerQuestion([...innerQuestion,{\r\n           question:\"\",\r\n           additionalInfo:\"\",\r\n           options:[]\r\n       }]);\r\n   }\r\n\r\n   const handleInnerQuestionInputE = (text,index) => {\r\n        let innerQues = [...innerQuestion];\r\n        innerQues[index].question = text;\r\n        setInnerQuestion(innerQues);\r\n    }\r\n\r\n   const handleAddInnerQuestionOptions = (event,index) => {\r\n        event.preventDefault();\r\n\r\n        let innerQues = [...innerQuestion];\r\n\r\n        innerQues[index].options.push({\r\n            option:\"\",\r\n            isCorrect:false\r\n        });\r\n\r\n        setInnerQuestion(innerQues);\r\n   }\r\n\r\n   const handleAdditionalTextE = (text,index) => {\r\n    let innerQues = [...innerQuestion];\r\n    innerQues[index].additionalInfo = text;\r\n    setInnerQuestion(innerQues);\r\n   }\r\n\r\n   const handleAddAdditionalInfo = (event,index) => {\r\n       event.preventDefault();\r\n        let innerQues = [...innerQuestion];\r\n        innerQues[index].additionalInfo = \" \";\r\n        setInnerQuestion(innerQues);\r\n   }\r\n\r\n   const removeInnerQuestion = (index) => {\r\n       let innerQues = [...innerQuestion];\r\n       innerQues.splice(index,1);\r\n       setInnerQuestion(innerQues);\r\n   }\r\n\r\n   const handleSetTopic = (e) => {\r\n        setTopic({\r\n            ...topic,\r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n\r\n   const handleOptionSet = (parentIndex,index) => {\r\n        // find the index of inner question then the index of the option and do it\r\n        let innerQues = [...innerQuestion];\r\n        innerQues[parentIndex].options[index].isCorrect = !innerQues[parentIndex].options[index].isCorrect;\r\n        setInnerQuestion(innerQues);\r\n   }\r\n\r\n\r\n   const handleOptionsInput = (event,parentIndex,index) => {\r\n        // find the index of inner question then the index of the option and do it\r\n        let innerQues = [...innerQuestion];\r\n        innerQues[parentIndex].options[index].option = event.target.value;\r\n        setInnerQuestion(innerQues);\r\n   }\r\n\r\n   const removeOption = (parentIndex,index) => {\r\n        // find the index of inner question then the index of the option and do it\r\n        let innerQues = [...innerQuestion];\r\n        innerQues[parentIndex].options.splice(index,1);\r\n        setInnerQuestion(innerQues);\r\n   }\r\n\r\n\r\n    return (\r\n        <Form onSubmit={saveQuestion}>\r\n            <Topic handleTopicAndSubject={handleSetTopic} topic={topic.topic} subtopic={topic.subTopic}/>\r\n            <Form.Field>\r\n            <SunEditor autoFocus={true}  setOptions={{\r\n                      buttonList :EDITOR_OPTIONS,\r\n                }} onChange={(content) => setQuestion(content) } setContents={question} showToolbar={true} enableToolbar={true}/>\r\n            </Form.Field>\r\n\r\n            <Form.Field>\r\n                <Button disabled={isSubmitted} primary onClick={handleAddQuestion} icon=\"add\" content=\"Question\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n\r\n            {innerQuestion.map((iq,q_index) => {\r\n                    return (\r\n                        <SCard key={`innerQuestion_${q_index}`}>\r\n                        <Header as='h4'>Sub question {q_index + 1}</Header>\r\n                        <Form.Field key={`inner_ques_${q_index}`}>\r\n                            <Form.Field>\r\n                                <Button type=\"button\" compact disabled={isSubmitted} basic color=\"red\" onClick={(e) => removeInnerQuestion(q_index)} content=\"Delete\" icon=\"trash alternate outline\" labelPosition=\"right\"/>\r\n                            </Form.Field>\r\n                            \r\n                            <Form.Field>\r\n                                {/* <textarea onChange={(e) => handleInnerQuestionInput(e,q_index)} value={iq.question} type=\"text\"/> */}\r\n                                <SunEditor autoFocus={true}  setOptions={{\r\n                                    buttonList :EDITOR_OPTIONS,\r\n                              }} onChange={(content) => handleInnerQuestionInputE(content,q_index) } setContents={iq.question} showToolbar={true} enableToolbar={true}/>\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <Button type=\"button\" compact disabled={isSubmitted && !isReviewer} primary onClick={(e) => handleAddInnerQuestionOptions(e,q_index)} icon=\"add\" content=\"Option\" labelPosition=\"right\"/>\r\n                            </Form.Field>\r\n                            {iq.options.map(({option,isCorrect},index) => {\r\n                                return (\r\n                                    <Form.Field key={`option_${index}`}>\r\n                                        <Form.Group widths=\"1\" inline>\r\n                                            <Form.Field>\r\n                                                <Checkbox disabled={isSubmitted && !isReviewer} onClick={(e) => handleOptionSet(q_index,index)} defaultChecked={isCorrect}/>\r\n                                            </Form.Field>\r\n                                            <Form.Field>\r\n                                                <input  onChange={(e) => handleOptionsInput(e,q_index,index)} value={option} type=\"text\"/>\r\n                                            </Form.Field>\r\n\r\n                                            <Button type=\"button\" circular icon=\"superscript\" disabled={isSubmitted && !isReviewer} compact basic color=\"teal\"/>\r\n                                            <Button type=\"button\" circular compact disabled={isSubmitted && !isReviewer} basic color=\"red\" icon=\"trash alternate outline\" onClick={(e) => removeOption(q_index,index)}/>\r\n                                        </Form.Group>\r\n                                    </Form.Field>\r\n                                );\r\n                            })}\r\n                             <Form.Field>\r\n                                <Button type=\"button\" compact primary disabled={(iq.additionalInfo?true:false) || (isSubmitted && !isReviewer)} onClick={(e) => handleAddAdditionalInfo(e,q_index)} content=\"Additional Information\" icon=\"add\" labelPosition=\"right\"/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                {iq.additionalInfo ? \r\n                                <SunEditor autoFocus={true}  setOptions={{\r\n                                    buttonList :EDITOR_OPTIONS,\r\n                              }} onChange={(content) => handleAdditionalTextE(content,q_index) } setContents={iq.additionalInfo} showToolbar={true} enableToolbar={true}/>\r\n                                :null} \r\n                            </Form.Field>\r\n\r\n                        </Form.Field>\r\n                        </SCard>\r\n                    );\r\n                })}\r\n            <Button basic color=\"green\" disabled={isSubmitted && !isReviewer} content='Save Question' icon='save' labelPosition='right'/>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default Comprehension;","import React,{useState,useEffect,useCallback, useContext} from \"react\";\r\nimport SunEditor from 'suneditor-react';\r\nimport {Button,Icon,Form,Checkbox} from \"semantic-ui-react\";\r\n\r\nimport Topic from './topic';\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\nconst QUESTION_TYPE = \"normal\";\r\nconst EDITOR_OPTIONS = [\r\n    ['undo', 'redo', 'font', 'fontSize', 'formatBlock'],\r\n    ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript', 'removeFormat'],\r\n    ['fontColor', 'hiliteColor', 'outdent', 'indent', 'align', 'horizontalRule', 'list', 'table'],\r\n    ['image', 'fullScreen', 'showBlocks', 'preview']\r\n];\r\n\r\nconst CAN_REVIEW = \"can:review\";\r\n\r\n// use the index to change the question's content on save or updating\r\nconst CBCQuestionComp = ({saveQuestionToDatabase,retrievedQuestion = {},index,isSubmitted = false}) => {\r\n    const { roles } = useContext(PaperContext);\r\n    const check_role = useCallback((role_required) => roles.includes(role_required),[roles]);\r\n    const isReviewer = check_role(CAN_REVIEW);\r\n\r\n    const [question,setQuestion] = useState(\"\");\r\n    const [topic,setTopic] = useState({ topic:\" \", subTopic:\" \" });\r\n    const [options,setOptions] = useState([]); // USE Typescript\r\n    const [additionalInfo,setAdditionalInfo] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let initialQuestion = retrievedQuestion && retrievedQuestion.question ? retrievedQuestion.question : \"\";    \r\n        let initialOptions = retrievedQuestion && retrievedQuestion.options_next ?retrievedQuestion.options_next.map(({option,isCorrect}) => {\r\n            return {option,isCorrect};\r\n        })  : [];\r\n        let initialAdditional = retrievedQuestion && retrievedQuestion.additionalInfo ? retrievedQuestion.additionalInfo : \"\";\r\n        \r\n        let initialTopicAndSubtopic = retrievedQuestion && retrievedQuestion.topic ? {\r\n            topic: retrievedQuestion.topic,\r\n            subTopic: retrievedQuestion.subTopic\r\n        } : { topic:\" \", subTopic:\" \" };\r\n\r\n        setTopic(initialTopicAndSubtopic);\r\n        setQuestion(initialQuestion);\r\n        setOptions(initialOptions);\r\n        setAdditionalInfo(initialAdditional);\r\n    },[]);\r\n\r\n    const handleSetTopic = (e) => {\r\n        setTopic({\r\n            ...topic,\r\n            [e.target.name]:e.target.value\r\n        });\r\n    }\r\n\r\n    const handleAddOptions = (e) => {\r\n        e.preventDefault();\r\n        setOptions([...options,{option:\"\",isCorrect:false}]);\r\n    }\r\n\r\n    const handleOptionsInput = (e,index) => {\r\n        let localOptions = [...options];\r\n        localOptions[index].option = e.target.value;\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const onOptionSet = (index) => {\r\n        let localOptions = [...options];\r\n        localOptions[index].isCorrect = !localOptions[index].isCorrect;\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const removeOption = (event,index) => {\r\n        event.preventDefault();\r\n        let localOptions = [...options];\r\n        localOptions.splice(index,1);\r\n        setOptions(localOptions);\r\n    }\r\n\r\n    const handleAddAdditionalInfo = (e) => {\r\n        e.preventDefault();\r\n        setAdditionalInfo(\" \");\r\n    }\r\n\r\n    const handleAdditionalTextE = (text) => {\r\n        setAdditionalInfo(text);\r\n    }\r\n\r\n    const saveQuestion = (e) => {\r\n        e.preventDefault();\r\n\r\n        let createdQuestion = {\r\n            questionType: QUESTION_TYPE,\r\n            question_id: retrievedQuestion ? retrievedQuestion._id : null,\r\n            question,\r\n            options_next:options,\r\n            topic: topic.topic,\r\n            subTopic: topic.subTopic,\r\n            additionalInfo:additionalInfo ? additionalInfo : \"\"\r\n        }\r\n\r\n        saveQuestionToDatabase(createdQuestion,index);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form /*onSubmit={saveQuestion}*/ onSubmit={e => {\r\n                e.preventDefault();\r\n            }}>\r\n            <Topic handleTopicAndSubject={handleSetTopic} topic={topic.topic} subtopic={topic.subTopic}/>\r\n            <Form.Field>\r\n                <SunEditor autoFocus={true}  setOptions={{\r\n                      buttonList : EDITOR_OPTIONS,\r\n                }} onChange={(content) => setQuestion(content) } setContents={question} showToolbar={true} enableToolbar={true}/>\r\n            </Form.Field>\r\n            \r\n\r\n            {/* answers */}\r\n            <Form.Field>\r\n                <Button type=\"button\" compact primary disabled={isSubmitted && !isReviewer} onClick={handleAddOptions} icon=\"add\" content=\"Answer\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n            \r\n                {options.map((foundOption,index) => {\r\n                    return (\r\n                        <Form.Field key={`option_${index}`}>\r\n                            <Form.Group widths=\"1\" inline>\r\n                                {/* <Form.Field>\r\n                                    <Checkbox disabled={isSubmitted && !isReviewer} defaultChecked={retrievedQuestion && foundOption.isCorrect ? true : false} onClick={(e) => onOptionSet(index)}/>\r\n                                </Form.Field> */}\r\n\r\n                                {/* NOTE: change to picking from the correct answers pool */}\r\n                                <Form.Field>\r\n                                    <input value={retrievedQuestion ? foundOption.option : null} onChange={(e) => handleOptionsInput(e,index)} type=\"text\"/>\r\n                                </Form.Field>\r\n\r\n                                <Button type=\"button\" circular icon=\"superscript\" disabled={isSubmitted && !isReviewer} compact basic color=\"teal\"/>\r\n\r\n                                <Button type=\"button\" circular compact basic color=\"red\" disabled={isSubmitted && !isReviewer} icon onClick={(e) => removeOption(e,index)}>\r\n                                    <Icon name=\"trash alternate outline\"/>\r\n                                </Button>\r\n                            </Form.Group>\r\n                        </Form.Field>\r\n                    );\r\n                })}\r\n            \r\n            <Form.Field>\r\n                <Button type=\"button\" compact primary disabled={(additionalInfo?true:false) || isSubmitted } onClick={handleAddAdditionalInfo} content=\"Additional Information\" icon=\"add\" labelPosition=\"right\"/>\r\n            </Form.Field>\r\n            <Form.Field>\r\n               {additionalInfo ? \r\n                    <SunEditor autoFocus={true}  setOptions={{\r\n                        buttonList : EDITOR_OPTIONS,\r\n                  }} onChange={(content) => handleAdditionalTextE(content) } setContents={additionalInfo} showToolbar={true} enableToolbar={true}/>\r\n                    :null\r\n                } \r\n            </Form.Field>\r\n            <Button basic color=\"green\" content='Save Question' disabled={isSubmitted && !isReviewer} icon='save' labelPosition='right'/>\r\n        </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CBCQuestionComp;","import React,{useState,useContext} from \"react\";\r\nimport {Form,Dropdown} from \"semantic-ui-react\";\r\nimport 'suneditor/dist/css/suneditor.min.css';\r\n\r\nimport SCard from './SCard';\r\nimport NormalQuestionComp from \"./normalQues\";\r\nimport Comprehension from \"./comprehension\";\r\nimport CBCQuestionComp from \"./cbc\";\r\n\r\nimport {PaperContext} from \"../context/paperContext\";\r\n\r\n\r\nconst NORMAL_QUESTION = \"normal\";\r\nconst COMPREHENSION_QUESTION = \"comprehension\";\r\nconst CBC_QUESTION = \"cbc\";\r\n\r\nconst QuestionComp = ({updatePaperContent,retrievedQuestion = {},index}) => {\r\n    const [questionType,setQuestionType] = useState(retrievedQuestion ? retrievedQuestion.questionType : NORMAL_QUESTION);\r\n\r\n    const {authToken,paperID,isSubmitted, isSpecialPaper,createNotification,addQuestion,paperGrade, paperSubject} = useContext(PaperContext);\r\n\r\n    const handleQuestionTypeChange = (_,{ value }) => {\r\n        setQuestionType(value);\r\n    }\r\n\r\n    const saveQuestionToDatabase = (question,index) => {\r\n        question.paperID = paperID;\r\n\r\n        addQuestion({\r\n            ...question,\r\n            paperGrade,\r\n            paperSubject\r\n        },authToken, isSpecialPaper)\r\n            .then(({data}) => {\r\n                if (data.success){\r\n                    updatePaperContent(data.question,index);\r\n                    createNotification(\"Success!!\",\"success\",\"Question created successfully\");\r\n                }else{\r\n                    throw new Error(\"Failed to create/update question\")\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!!\",\"danger\",error.message);\r\n            })\r\n\r\n    }\r\n\r\n    const renderComp = (condition) => {\r\n        switch(condition){\r\n            case NORMAL_QUESTION:\r\n                return <NormalQuestionComp saveQuestionToDatabase={saveQuestionToDatabase}/>\r\n            case COMPREHENSION_QUESTION:\r\n                return <Comprehension saveQuestionToDatabase={saveQuestionToDatabase}/>\r\n            case CBC_QUESTION:\r\n                return <CBCQuestionComp  saveQuestionToDatabase={saveQuestionToDatabase}/>\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const renderAllreadyFilled =  (question,index) => {\r\n        switch(question.questionType){\r\n            case NORMAL_QUESTION:\r\n                return <NormalQuestionComp isSubmitted={isSubmitted} saveQuestionToDatabase={saveQuestionToDatabase} retrievedQuestion={retrievedQuestion} index={index}/>\r\n            case COMPREHENSION_QUESTION:\r\n                return <Comprehension isSubmitted={isSubmitted} \r\n                            saveQuestionToDatabase={saveQuestionToDatabase} retrievedQuestion={retrievedQuestion} index={index}/>\r\n            case CBC_QUESTION:\r\n                return <CBCQuestionComp \r\n                    isSubmitted={isSubmitted} \r\n                    saveQuestionToDatabase={saveQuestionToDatabase}\r\n                    retrievedQuestion={retrievedQuestion} index={index}    \r\n                />\r\n            \r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    const options = [\r\n        { key: 1, text: 'Normal', value: 'normal' },\r\n        { key: 2, text: 'Comprehension', value: 'comprehension' },\r\n        { key: 3, text: 'CBC', value: 'cbc' }\r\n    ]\r\n\r\n    return (\r\n        <SCard>\r\n            <Form style={{marginBottom:\"10px\"}}>\r\n                <Form.Field>\r\n                    <Dropdown\r\n                        disabled={isSubmitted}\r\n                        onChange={handleQuestionTypeChange}\r\n                        selection\r\n                        fluid\r\n                        defaultValue = {retrievedQuestion && retrievedQuestion.questionType ? retrievedQuestion.questionType : \"normal\"}\r\n                        options={options}\r\n                        placeholder='Choose Question Type'\r\n                    />\r\n\r\n                </Form.Field>\r\n            </Form>\r\n            \r\n            {retrievedQuestion ? renderAllreadyFilled(retrievedQuestion,index) : renderComp(questionType)}\r\n          \r\n        </SCard>\r\n    );\r\n}\r\n\r\nexport default QuestionComp;","import React, { useState, useContext } from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\nimport { PaperContext } from '../context/paperContext';\r\n\r\n\r\nconst StatusComp = ({ isActive, setIsActive, setIsSubmitted }) => {\r\n    const {authToken\r\n        ,isSubmittedDispatch\r\n        ,fetchPapers\r\n        ,socketIO\r\n    } = useContext(PaperContext);\r\n\r\n    // we are updating the context too much\r\n    const [processingMessages, setProcessingMessages] = useState(\"\");\r\n\r\n    const setStatusSteps = (msg) => {\r\n        console.log(msg);\r\n        setProcessingMessages(before => before + msg + '\\n');\r\n    }\r\n\r\n    socketIO.on('submission_status',(msg) => {\r\n        setStatusSteps(msg);\r\n    })\r\n\r\n    socketIO.on('submission_error',(msg) => {\r\n        setStatusSteps(msg);\r\n        setTimeout(() => {\r\n            setIsActive(false);\r\n        },3000);\r\n    })\r\n\r\n    socketIO.on('submission_end',(msg) => {\r\n        setStatusSteps(msg);\r\n        \r\n        setIsSubmitted(true);\r\n        isSubmittedDispatch(true);\r\n        fetchPapers(authToken);\r\n\r\n        setTimeout(() => {\r\n            setIsActive(false);\r\n        },3000);\r\n    })\r\n\r\n    return (\r\n        <Dimmer active={isActive}>\r\n            <Loader content={\"submitting paper ... please wait ...\"}/>\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default StatusComp;","import React,{useState,useContext,useEffect} from \"react\";\r\nimport {Button,Header,Transition,Segment,Label,Pagination, Icon } from \"semantic-ui-react\";\r\nimport {motion} from 'framer-motion';\r\n\r\nimport QuestionComp from \"./question\";\r\nimport { PaperContext } from \"../context/paperContext\";\r\nimport StatusComp from \"./StatusComp\";\r\n\r\n\r\nconst CAN_REVIEW = \"can:review\";\r\n\r\n\r\nconst Paper = ({fetched_questions=[], pageCount,setCurrectActivePage, currentActivePage}) => {\r\n    const {\r\n        authToken\r\n        ,createNotification\r\n        ,paperID\r\n        ,setIsSample\r\n        ,changePaperID\r\n        ,removePaper\r\n        ,paperName\r\n        ,fetchPapers\r\n        ,isSubmitted\r\n        ,submitPaperDispatch\r\n        ,approveQuestionDispatch\r\n        ,removeQuestionDispatch\r\n        ,socket_io_id\r\n        ,paperType\r\n        ,isSpecialPaper\r\n        ,roles\r\n    } = useContext(PaperContext);\r\n\r\n    const check_role = (role_required) => roles.includes(role_required);\r\n    const isReviewer = check_role(CAN_REVIEW);\r\n    \r\n    const [isHidden,setIsHidden] = useState(new Array(fetched_questions.length).fill(true));\r\n\r\n    const [paperQuestions,setPaperQuestions] = useState([]);\r\n    const [is_submitted,setIsSubmitted] = useState(false);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setPaperQuestions(fetched_questions);\r\n        setIsSubmitted(isSubmitted);\r\n    },[]);\r\n\r\n    useEffect(() => {\r\n        setPaperQuestions(fetched_questions);\r\n    },[fetched_questions]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n    },[isSubmitted]);\r\n\r\n    // set a fetch stuff here on click of the pagination thingy\r\n    const handlePageSwitch = (e, {activePage}) => {\r\n        setCurrectActivePage(activePage);\r\n    }\r\n\r\n    const updatePaperContent = (new_question,index) => {\r\n        let local_paper_copy = [...paperQuestions];\r\n        local_paper_copy[index] = new_question;\r\n        setPaperQuestions(local_paper_copy);\r\n    }\r\n\r\n    const internalSetIsSample = (index,questionID,isSample) => {\r\n        setIsSample(authToken, questionID, isSample)\r\n            .then(status => {\r\n                if (status) {\r\n                    let local_paper_copy = [...paperQuestions];\r\n                    local_paper_copy[index].isSample = isSample;\r\n                    setPaperQuestions(local_paper_copy);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    const addQuestion = (e) => {\r\n        setPaperQuestions([...paperQuestions,null]);\r\n    }\r\n\r\n    const removeMyPaper = () => {\r\n        let reply = window.confirm(\"are you sure?\")\r\n\r\n        if (!reply)\r\n            return;\r\n\r\n        removePaper(paperID,authToken, isSpecialPaper)\r\n            .then(({data}) => {\r\n                if (data){\r\n                    if (data.success){\r\n                        createNotification(\"Success!!\",\"success\",\"Paper deleted successfully\");\r\n                        fetchPapers(authToken);\r\n                        changePaperID(null);\r\n                        return;\r\n                    }\r\n                    throw new Error(data.error);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!!\",\"danger\",error.message);\r\n            })\r\n    }\r\n\r\n    const removeQuestion = (questionId,index) => {\r\n        let reply = window.confirm(\"are you sure?\")\r\n\r\n        if (!reply)\r\n            return;\r\n        let paperQuestionsCopy = [...paperQuestions];\r\n        let question_object = paperQuestionsCopy[index];\r\n\r\n        let cleanUpFunc = () => {\r\n            paperQuestionsCopy.splice(index,1);\r\n            setPaperQuestions(paperQuestionsCopy);\r\n            createNotification(\"Success!\",\"success\",\"Question removed successfully\");\r\n        }\r\n\r\n        if(question_object){\r\n            removeQuestionDispatch(questionId,authToken)\r\n                .then(() => {\r\n                    cleanUpFunc();\r\n                })\r\n                .catch(error => {\r\n                    createNotification(\"Error!\",\"error\",error.message);\r\n                })\r\n        }else{\r\n            cleanUpFunc();\r\n        }\r\n    }\r\n\r\n    const updateQuestionsState = (status,index) => {\r\n        let paperQuestionsCopy = [...paperQuestions];\r\n        let question_object = paperQuestionsCopy[index];\r\n        question_object.status = status;\r\n        setPaperQuestions([...paperQuestionsCopy]);\r\n    }\r\n\r\n    const submitForReviewAction = () => {\r\n        submitPaperDispatch(socket_io_id,paperID,authToken)\r\n            .then(({data}) => {\r\n                if(data.success){\r\n                    setIsActive(true);\r\n                    createNotification(\"Success!\",\"success\",data.message);\r\n                }else{\r\n                    throw new Error(\"Failed to submit paper for review\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                createNotification(\"Error!\",\"danger\",error.message);\r\n            })\r\n    }\r\n\r\n    const approveAuthorQuestion = (id,index) => {\r\n        approveQuestionDispatch(id,index,authToken)\r\n            .then(({data}) => {\r\n                if(data.success){\r\n                    updateQuestionsState(\"approved\",index)\r\n                }else{\r\n                    throw new Error(\"Failed to approve question\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                createNotification(\"Error!\",\"danger\",error.message);\r\n            });\r\n    }\r\n\r\n    const toggleQuestionVisibility = (index) => {\r\n        let clone_state = [...isHidden];\r\n        clone_state[index] = clone_state[index] ? !clone_state[index] : true;\r\n        setIsHidden(clone_state)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StatusComp isActive={isActive} setIsActive={setIsActive} setIsSubmitted={setIsSubmitted}/>\r\n            <motion.div\r\n                initial={{ opacity:0 }}\r\n                animate={{ opacity:1, duration:0.4 }}\r\n            >      \r\n                <div style={{marginBottom:\"10px\", borderBottom:\"1px solid #dbdbdb\", paddingBottom:\"1px\"}}>\r\n                    <Button compact basic color=\"teal\" disabled={is_submitted} onClick={addQuestion} content='create question' icon='add' labelPosition='right'/>\r\n                    \r\n                    <Button\r\n                        compact\r\n                        basic\r\n                        color=\"orange\" \r\n                        disabled={check_role(CAN_REVIEW) || is_submitted}\r\n                        onClick={submitForReviewAction} \r\n                        content='submit paper' \r\n                        icon='send' \r\n                        labelPosition='right'/>\r\n\r\n                    <Button\r\n                        compact\r\n                        basic\r\n                        color=\"red\"\r\n                        disabled={is_submitted && !isReviewer}\r\n                        onClick={removeMyPaper} \r\n                        content='delete paper' \r\n                        icon='trash alternate outline' \r\n                        labelPosition='right'/>\r\n\r\n                    {isReviewer ? <Button\r\n                        compact\r\n                        basic\r\n                        color=\"green\"\r\n                        \r\n                        disabled={true}//{is_submitted && !isReviewer}\r\n                        // onClick={removeMyPaper} \r\n                        content='approve paper' \r\n                        icon='thumbs up outline'\r\n                        labelPosition='right'/>\r\n                        : null }\r\n\r\n                    <div style={{\r\n                        margin:\"5px\"\r\n                    }}>\r\n                        <Label>\r\n                            Paper Type\r\n                            <Label.Detail>{paperType}</Label.Detail>\r\n                        </Label>\r\n                        <Label>\r\n                            Paper Name\r\n                            <Label.Detail>{paperName}</Label.Detail>\r\n                        </Label>\r\n                        <Label>\r\n                            Number of Questions\r\n                            <Label.Detail>{paperQuestions.length}</Label.Detail>\r\n                        </Label>\r\n                        {/* check circle outline */}\r\n                        {/* ban */}\r\n                        <Label>\r\n                            Submitted\r\n                            <Label.Detail>\r\n                                <Icon \r\n                                    color={isSubmitted ? \"green\": \"red\"} \r\n                                    name={isSubmitted ? \"check circle outline\": \"ban\"} \r\n                                />\r\n                            </Label.Detail>\r\n                        </Label>\r\n                    </div> \r\n                </div>\r\n                \r\n\r\n                \r\n                <div style={{height:\"85vh\", overflowY:\"scroll\",paddingRight:\"6px\", paddingLeft:\"4px\"}} >\r\n                    {paperQuestions.map((retrievedQuestion,index) => {\r\n                        return (\r\n                            <React.Fragment key={`question_${index}`}>\r\n                                \r\n                                    <Segment.Group horizontal compact>\r\n                                        <Segment onClick={(x) => toggleQuestionVisibility(index)} style={{cursor:\"pointer\"}} color='orange'>\r\n                                            <Header as='h3'>Question  {index + 1}</Header>\r\n                                        </Segment>\r\n                                        <Segment basic textAlign={\"center\"} color=\"green\">\r\n                                            <Label color='green'>\r\n                                                {retrievedQuestion && retrievedQuestion.status ? retrievedQuestion.status.toUpperCase() : \"ONGOING\"}\r\n                                            </Label>\r\n                                        </Segment>\r\n                                        <Segment basic textAlign={\"right\"} color='red'>\r\n                                            {/* check if the paper is saved first */}\r\n                                        {retrievedQuestion && (retrievedQuestion._id !== null) && check_role(CAN_REVIEW)? \r\n                                            <Button basic compact color=\"olive\" \r\n                                                // disabled={retrievedQuestion && retrievedQuestion.isExposed} \r\n                                                icon \r\n                                                onClick={(e) => internalSetIsSample(index,retrievedQuestion && retrievedQuestion._id,(retrievedQuestion && !retrievedQuestion.isSample))}\r\n                                                // update status za hii stuff pia\r\n                                                // onClick={(e) => approveAuthorQuestion(retrievedQuestion && retrievedQuestion._id,index)} \r\n                                                content={retrievedQuestion && retrievedQuestion.isSample ? \"remove sample\": \"set sample\"}/> : null\r\n                                        }\r\n                                        {is_submitted && check_role(CAN_REVIEW)? \r\n                                            <Button basic compact color=\"orange\" \r\n                                                disabled={retrievedQuestion && retrievedQuestion.isExposed} \r\n                                                icon \r\n                                                onClick={(e) => approveAuthorQuestion(retrievedQuestion && retrievedQuestion._id,index)} \r\n                                                content=\"Approve\" icon=\"thumbs up alternate outline\" labelPosition=\"right\"/> : null\r\n                                        }\r\n                                            \r\n                                            <Button compact basic color=\"red\" disabled={isSubmitted && !isReviewer} onClick={(e) => removeQuestion(retrievedQuestion ? retrievedQuestion._id:null,index)} content=\"Delete\" icon=\"trash alternate outline\" labelPosition=\"right\"/>\r\n                                        \r\n                                        </Segment>\r\n                                    </Segment.Group>\r\n                                \r\n                                <Transition visible={isHidden[index] ? !isHidden[index] : true} animation='drop' duration={450}>\r\n                                    <div style={{marginBottom:\"20px\"}}>\r\n                                        <QuestionComp key={`question_${index}`} updatePaperContent={updatePaperContent} retrievedQuestion={retrievedQuestion} index={index}/>\r\n                                    </div>\r\n                                </Transition>\r\n\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                    { pageCount > 1 ? <Pagination onPageChange={handlePageSwitch} defaultActivePage={currentActivePage} totalPages={pageCount} /> : null}\r\n                </div>\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Paper;","import React from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\n// fetch the filtereable categories --> is sample mos\r\n\r\nconst tagOptions = [\r\n  {\r\n    key: 'sample',\r\n    text: 'Samples',\r\n    value: 'isSample',\r\n    // label: { color: 'green', empty: true, circular: true },\r\n  },\r\n  {\r\n    key: 'none',\r\n    text: 'None',\r\n    value: 'none',\r\n    // label: { color: 'blue', empty: true, circular: true },\r\n  },\r\n]\r\n\r\n\r\nconst FilterComp = ({ setChooseCategory }) => {\r\n    const handleSelection = (_,{ value }) => {\r\n        setChooseCategory(value)\r\n    }\r\n\r\n    return (\r\n        <Dropdown\r\n            onChange={handleSelection}\r\n            selection\r\n            fluid\r\n            options={tagOptions}\r\n            placeholder='Filter'\r\n        />\r\n    )\r\n}\r\n\r\nexport default FilterComp","import { useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, Divider } from \"semantic-ui-react\"\r\nimport queryString from 'query-string';\r\n\r\nimport FilterComp from './FilterComp'\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\n\r\n// start working on this now\r\nconst SearchForm = ({ setSearchTerm: setParentSearchTerm }) => {\r\n    const { setIsRefreshingDispatch, isRefreshing } = useContext(PaperContext)\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [searchCategory,setSearchCategory] = useState(\"\");\r\n\r\n    const changeSearchTerm = (e) => {\r\n        setSearchTerm(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searchCategory === \"none\"){\r\n            setIsRefreshingDispatch(!isRefreshing);\r\n        }\r\n    },[searchCategory])\r\n\r\n\r\n    const searchDB = (e) => {\r\n        e.preventDefault();\r\n        let searchString = {}\r\n\r\n        if (searchTerm) {\r\n            searchString.searchTerm = searchTerm\r\n        }\r\n\r\n        if (searchCategory){\r\n            searchString.searchCategory = searchCategory\r\n        }\r\n\r\n        setParentSearchTerm(queryString.stringify(searchString));\r\n        setSearchTerm(\"\");\r\n        setSearchCategory(\"\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={searchDB}>\r\n                    <Form.Group >\r\n                        <Form.Field width={11}>\r\n                            <input type=\"search\" placeholder=\"Search...\" onChange={changeSearchTerm} value={searchTerm}/>\r\n                        </Form.Field>\r\n                        <Form.Field width={2}>\r\n                            <FilterComp setChooseCategory={setSearchCategory}/>\r\n                        </Form.Field>\r\n                        <Form.Field width={2}>\r\n                            <Button content=\"SEARCH\" icon=\"search\" color=\"green\" basic labelPosition=\"right\"/>\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n            </Form>\r\n            <Divider/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import React,{useContext,useEffect} from 'react';\r\nimport {Segment,Loader} from \"semantic-ui-react\";\r\n\r\nimport Paper from \"./paper\";\r\nimport {PaperContext} from \"../context/paperContext\";\r\nimport { useState } from 'react';\r\n\r\nimport SearchForm from \"./SearchForm\";\r\n\r\n\r\nconst PaperHOC = () => {\r\n    const { \r\n        paperID,fetchQuestions,\r\n        authToken,isSubmittedDispatch,\r\n        updatePaperDetails,searchForQuestions\r\n        ,isRefreshing, isSpecialPaper, rootPaperName\r\n    } = useContext(PaperContext);\r\n    \r\n    const [fetchedQuestions,setFetchedQuestions] = useState([]);\r\n    const [searchTerm, setSearchTerm] = useState(null);\r\n    const [pageCount,setPageCount] = useState(0);\r\n    const [currentActivePage, setCurrectActivePage] = useState(1);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n    const [error,setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setCurrectActivePage(1);\r\n    },[paperID]);\r\n\r\n    useEffect(() => {\r\n        if (searchTerm !== null){\r\n            searchForQuestions(authToken,paperID,searchTerm, isSpecialPaper)\r\n            .then(({ data }) => {\r\n                if (data && data.success){\r\n                    setPageCount(1);\r\n                    setFetchedQuestions(data.paper.questions);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n        }\r\n    },[searchTerm])\r\n\r\n    // this is where we fetch the questions from the backend but we need a way to send special papers bana\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n\r\n        // we are good sasa ( just pass the status if its a special paper and the server will handle it )\r\n        fetchQuestions(paperID,authToken, isSpecialPaper, currentActivePage - 1)\r\n            .then(({data}) => {\r\n                setPageCount(data.pageCount);\r\n                // console.log(data.paper);\r\n                setFetchedQuestions(data.paper.questions);\r\n                isSubmittedDispatch(data.paper.isSubmitted);\r\n\r\n                // if this is a special paper we have different things\r\n                // this has no submissions and stuff\r\n                // we dont have an actual grade here --> we should pass group_name_key for special papers\r\n\r\n                updatePaperDetails({\r\n                    grade: isSpecialPaper ? rootPaperName : data.paper.grade ,\r\n                    subject: data.paper.subject,\r\n\r\n                    // we dont have the paper name for special papers\r\n                    paperName: isSpecialPaper ?  data.paper.subject : data.paper.paperName,\r\n                    paperType: isSpecialPaper ? \"Special Paper\" : data.paper.paperType\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setError(error.message);\r\n            })\r\n            .finally(() => { setIsLoading(false); })\r\n    },[paperID, currentActivePage, isRefreshing]);\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div>\r\n                <Segment>\r\n                    <Loader active inline=\"centered\">Fetching questions...</Loader>\r\n                </Segment>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error){\r\n        return (\r\n            <Segment>\r\n                Error fetching questions\r\n            </Segment>\r\n        );\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <SearchForm  setSearchTerm={setSearchTerm}/>\r\n            \r\n            {/* we want to rerender the paper when the search term is applied here what do we do? */}\r\n            <Paper\r\n                fetched_questions={fetchedQuestions}\r\n                pageCount={pageCount}\r\n                setCurrectActivePage={setCurrectActivePage}\r\n                currentActivePage={currentActivePage} \r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PaperHOC;","export default __webpack_public_path__ + \"static/media/adminfavi.ee5071ab.jpg\";","import React, {useContext} from 'react'\r\nimport { Button, Menu,Icon, Label } from 'semantic-ui-react';\r\nimport {Link, Redirect } from \"react-router-dom\";\r\n\r\nimport { PaperContext } from '../context/paperContext';\r\nimport AdminFavi from '../images/adminfavi.jpg';\r\n\r\nconst Navbar = () => {\r\n    const { logoutDispatcher } = useContext(PaperContext);\r\n\r\n    const signOut = () => {\r\n        logoutDispatcher();\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n      <Menu size='small' attached=\"top\" style={{marginTop:\"5px\"}}>\r\n        <Menu.Item header as={Link} to=\"/dashboard\">\r\n          <img src={AdminFavi} alt=\"admin favicon\" />\r\n        </Menu.Item>\r\n        <Menu.Menu position='right'>\r\n          {/* <Menu.Item\r\n            as={Link} to=\"/analytics\"\r\n            name=\"My Panel\"\r\n          />\r\n          <Menu.Item\r\n              as={Link} to=\"/admin\"\r\n              name=\"Admin Panel\"\r\n            /> */}\r\n\r\n          {/* <Menu.Item as={Link} to='/notifications'>\r\n            <Icon name='bell' /> Notifications\r\n            <Label color='teal'>\r\n              22\r\n            </Label>\r\n          </Menu.Item> */}\r\n          <Menu.Item>\r\n            <Button primary onClick={signOut}>Sign Out</Button>\r\n          </Menu.Item>\r\n        </Menu.Menu>\r\n      </Menu>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React,{useContext} from 'react';\r\nimport {Container, Grid, Segment} from \"semantic-ui-react\";\r\n\r\nimport SideBar from \"./SideBar\";\r\nimport PaperHOC from './paperhoc';\r\n\r\nimport {PaperContext} from \"../context/paperContext\";\r\nimport Navbar from './Navbar';\r\n\r\n// the creation of paper should be managed from here\r\n\r\nconst ContentPage = () => {\r\n   const {paperID} = useContext(PaperContext);\r\n\r\n    return (\r\n        <>\r\n        <Navbar/>\r\n            <Container>\r\n                <Segment style={{marginTop:\"5px\"}}>\r\n                    <Grid>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={4}>\r\n                                \r\n                                <SideBar/>\r\n                            \r\n                            </Grid.Column>\r\n\r\n                            <Grid.Column width={12}>\r\n                            {paperID ? <PaperHOC/> : null} \r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Segment>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ContentPage;","import React,{useState,useContext} from \"react\";\r\nimport { Button, Form, Card, Header } from 'semantic-ui-react';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport {PaperContext} from \"../context/paperContext\";\r\n\r\nconst FormComp = () => {\r\n    const {loginDispatch,authToken} = useContext(PaperContext);\r\n    const [isLoading,setIsLoading] = useState(false);\r\n    const [loginData,setLoginData] = useState({\r\n        email:\"\",\r\n        password:\"\"\r\n    })\r\n\r\n    const handleInputChange = (e) => {\r\n        setLoginData({\r\n            ...loginData,\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setIsLoading(true);\r\n        loginDispatch(loginData);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    if(authToken){\r\n        return <Redirect to=\"/dashboard\"/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <Header size='huge'>Zoezi Data Entry Tool</Header>\r\n        <Card>\r\n            <Card.Content>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Field>\r\n                        <label>Email</label>\r\n                        <input onChange={handleInputChange} value={loginData.email} type=\"email\" name=\"email\" placeholder='Email Address' />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Password</label>\r\n                        <input onChange={handleInputChange} value={loginData.password} placeholder='Password' type=\"password\" name=\"password\"/>\r\n                    </Form.Field>\r\n                    <Button loading={isLoading} primary fluid type='submit'>Login</Button>\r\n                </Form>\r\n            </Card.Content>\r\n        </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormComp\r\n","import React from \"react\";\r\nimport FormComp from \"../components/FormComp\";\r\n\r\nconst LoginForm = () => (\r\n    <div style={{marginLeft:\"auto\",marginRight:\"auto\",marginTop:\"20px\",width:\"400px\"}}>\r\n         <FormComp/>\r\n    </div>\r\n)\r\n\r\nexport default LoginForm\r\n","import React,{useContext} from \"react\";\r\nimport {Route,Redirect} from \"react-router-dom\";\r\nimport {PaperContext} from \"../context/paperContext\";\r\n\r\nconst ProtectedRoute = ({component:Component,...rest}) => {\r\n    const {authToken} = useContext(PaperContext);\r\n    \r\n    return (\r\n        <Route>\r\n            {authToken ? <Component/> : <Redirect to=\"/\"/>}\r\n        </Route>\r\n    );\r\n}\r\n\r\nexport default ProtectedRoute;","import { useContext,useEffect } from \"react\";\r\nimport { PaperContext } from \"../context/paperContext\";\r\n\r\nconst SocketWatcher = () => {\r\n    const { authToken, socketIO, createNotification, fetchPapers } = useContext(PaperContext);\r\n\r\n    useEffect(() => {\r\n        if (authToken){\r\n            socketIO.emit('author regestration',{ authToken })\r\n        }\r\n    },[authToken])\r\n\r\n    socketIO.on(\"review paper\",(msg) => {\r\n        createNotification(\"success\", \"info\",String(msg))\r\n        fetchPapers(authToken)\r\n    });\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SocketWatcher;","import 'semantic-ui-css/semantic.min.css'\r\nimport {Container} from \"semantic-ui-react\";\r\nimport {BrowserRouter,Route,Switch} from \"react-router-dom\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\n\r\nimport ContentPage from \"./components/ContentPage\";\r\nimport PaperProvider from \"./context/paperContext\";\r\nimport LoginForm from './pages/login';\r\nimport ProtectedRoute from \"./routes/ProtectedRoute\";\r\nimport Analytics from './components/analytics';\r\nimport Notifications from './components/Notifications';\r\nimport SocketWatcher from './components/SocketWatcher';\r\nimport AuthorManagement from './pages/authorManagement';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n        <ReactNotification />\r\n        <PaperProvider>\r\n          <Container>\r\n            <SocketWatcher/>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <LoginForm/>\r\n              </Route>\r\n              <ProtectedRoute path=\"/dashboard\" component={ContentPage}/>\r\n              {/* <ProtectedRoute path=\"/analytics\" component={Analytics}/> */}\r\n              {/* <ProtectedRoute path=\"/notifications\" component={Notifications}/> */}\r\n              {/* <ProtectedRoute path=\"/admin\" component={AuthorManagement}/> */}\r\n            </Switch>\r\n          </Container>\r\n        </PaperProvider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>,\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}